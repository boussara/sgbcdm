package ma.brs.easyatm.ejr.serviceimpl.ejrproc.cam;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;
import org.sculptor.framework.context.ServiceContext;
import org.sculptor.framework.domain.PagedResult;
import org.sculptor.framework.domain.PagingParameter;

import ma.brs.easyatm.common.ApplicationContextHolder;
import ma.brs.easyatm.ejr.domain.EjrAlimentation;
import ma.brs.easyatm.ejr.domain.EjrArreteCentral;
import ma.brs.easyatm.ejr.domain.EjrCashCounter;
import ma.brs.easyatm.ejr.domain.EjrCashCounterCleared;
import ma.brs.easyatm.ejr.domain.EjrCashCounterProperties;
import ma.brs.easyatm.ejr.domain.EjrCashCounterSop;
import ma.brs.easyatm.ejr.domain.EjrCassette;
import ma.brs.easyatm.ejr.domain.EjrCoffreEvent;
import ma.brs.easyatm.ejr.domain.EjrCountClear;
import ma.brs.easyatm.ejr.domain.EjrDevice;
import ma.brs.easyatm.ejr.domain.EjrRetract;
import ma.brs.easyatm.ejr.domain.EjrServerCnx;
import ma.brs.easyatm.ejr.domain.EjrTransaction;
import ma.brs.easyatm.ejr.domain.EjrWinErrMap;
import ma.brs.easyatm.ejr.domain.EjrWincorError;
import ma.brs.easyatm.ejr.serviceapi.EjrAlimentationService;
import ma.brs.easyatm.ejr.serviceapi.EjrArreteCentralService;
import ma.brs.easyatm.ejr.serviceapi.EjrCashCounterClearedService;
import ma.brs.easyatm.ejr.serviceapi.EjrCashCounterCsts;
import ma.brs.easyatm.ejr.serviceapi.EjrCashCounterDTO;
import ma.brs.easyatm.ejr.serviceapi.EjrCashCounterService;
import ma.brs.easyatm.ejr.serviceapi.EjrCashCounterSopCsts;
import ma.brs.easyatm.ejr.serviceapi.EjrCashCounterSopService;
import ma.brs.easyatm.ejr.serviceapi.EjrCassetteService;
import ma.brs.easyatm.ejr.serviceapi.EjrCoffreEventService;
import ma.brs.easyatm.ejr.serviceapi.EjrCountClearService;
import ma.brs.easyatm.ejr.serviceapi.EjrDeviceService;
import ma.brs.easyatm.ejr.serviceapi.EjrProcStatusCsts;
import ma.brs.easyatm.ejr.serviceapi.EjrRetractService;
import ma.brs.easyatm.ejr.serviceapi.EjrServerCnxService;
import ma.brs.easyatm.ejr.serviceapi.EjrTransactionCsts;
import ma.brs.easyatm.ejr.serviceapi.EjrTransactionService;
import ma.brs.easyatm.ejr.serviceapi.EjrWinErrMapService;
import ma.brs.easyatm.ejr.serviceapi.EjrWincorErrorService;
import ma.brs.easyatm.ejr.serviceimpl.common.EjPattern;
import ma.brs.easyatm.ejr.serviceimpl.common.EjPatternDef;
import ma.brs.easyatm.ejr.serviceimpl.common.MsgResponse;
import ma.brs.easyatm.ejr.serviceimpl.ejrproc.EjrFileProcessor;
import ma.brs.easyatm.mon.domain.MonIssue;
import ma.brs.easyatm.mon.serviceapi.MonIssueService;
import ma.brs.easyatm.mon.serviceapi.MonSeverityService;
import ma.brs.easyatm.par.domain.ParCurrency;
import ma.brs.easyatm.par.serviceapi.ParCurrencyService;
import ma.brs.easyatm.top.domain.TopNe;
import ma.brs.easyatm.top.serviceapi.TopNeStateService;

public class EjCamAnalyzerSigma extends EjrFileProcessor {
	private static final Logger logger = Logger.getLogger(EjCamAnalyzerSigma.class);
	private static final SimpleDateFormat fileDateFormat = new SimpleDateFormat(
			"yyyyMMdd");	
	public static SimpleDateFormat dateTimesFormat2=new SimpleDateFormat("dd/MM/yy HH:mm");

	EjrTransactionService ejrTransactionService;
	
	ParCurrencyService parCurrencyService;
	EjrArreteCentralService ejrArreteCentralService;
	EjrCashCounterClearedService ejrCashCounterClearedService;
	EjrCashCounterSopService ejrCashCounterSopService;
	EjrAlimentationService ejrAlimentationService;
	EjrServerCnxService ejrServerCnxService;
	EjrDeviceService ejrDeviceService;
	EjrCoffreEventService ejrCoffreEventService;
	EjrWincorErrorService ejrWincorErrorService;
	EjrWinErrMapService ejrWinErrMapService;
	EjrCassetteService ejrCassetteService;
	EjrCashCounterService ejrCashCounterService;
	EjrCountClearService ejrCountClearService;
	EjrRetractService ejrRetractService;
	MonSeverityService monSeverityService;
	MonIssueService monIssueService;
	TopNeStateService topNeStateService;
		
	private ParCurrency lastUsedCurrency=null;
	private Date startDate=null;
	private String notesPresentedLine="";
    private EjrTransaction lastTransaction=null;

	protected static ArrayList<EjPattern> ejArrCash = new ArrayList<EjPattern>();

	private static final SimpleDateFormat TraDateFormat = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
	private static EjPatternDef[] winPatterns = {new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) -> TRANSACTION START", 1, 0,	AnalyzerCamWinCst.START_TRX, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) PIN ENTERED", 1,	0, AnalyzerCamWinCst.PIN_ENTRED, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) TRANSACTION REQUEST", 1,	0, AnalyzerCamWinCst.TRANS_REQ, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) TRACK 2 DATA: ([0-9\\*]+)", 1, 0, AnalyzerCamWinCst.TRACK_2_DATA, 1, 0,0),
			new EjPatternDef("CASH WITHRAWAL", 1, 0, AnalyzerCamWinCst.TRA_CODE, 1, 0,0),
			new EjPatternDef("BALANCE INQUIRY", 1, 0,	AnalyzerCamWinCst.TRA_CODE, 1, 0,0),
			new EjPatternDef("TRANSACTION ANNULEE", 1, 0, AnalyzerCamWinCst.TRA_CODE, 1, 0,0),
			new EjPatternDef("MINI RELEVE", 1, 0, AnalyzerCamWinCst.TRA_CODE, 1, 0,0),
			new EjPatternDef("PIN CHANGE", 1, 0, AnalyzerCamWinCst.TRA_CODE, 1, 0,0),
			new EjPatternDef("AUTHENTIFICATION", 1, 0, AnalyzerCamWinCst.TRA_CODE, 1, 0,0),
			new EjPatternDef("CAPTURE DE CARTE", 1, 0, AnalyzerCamWinCst.TRA_CODE, 1, 0,0),
			new EjPatternDef("NUM.CARTES[ |\t]+: ([0-9\\-|X]+)", 0, 0,	AnalyzerCamWinCst.CARD, 1, 0,0),
			new EjPatternDef("CARD NBR.[ |\t]+: ([0-9\\-|X]+)", 0, 0, AnalyzerCamWinCst.CARD, 1, 0,0),
			new EjPatternDef("NUM.COMPTE[ |\t]+: ([0-9\\*]+)", 0, 0, AnalyzerCamWinCst.ACCOUNT, 1, 0,0),
			new EjPatternDef("ACCOUNT NBR.[ |\t]+: ([0-9\\*]+)", 0, 0,	AnalyzerCamWinCst.ACCOUNT, 1, 0,0),
			new EjPatternDef("MNT.RETRAIT[ |\t]+: ([A-Z]{3}) ([0-9]+.[0-9]{2})", 0, 0,	AnalyzerCamWinCst.AMOUNT, 1, 0,0),
			new EjPatternDef("MNT.TRANSACT[ |\t]+: ([A-Z]{3}) ([0-9]+.[0-9]{2})", 0, 0,	AnalyzerCamWinCst.AMOUNT, 1, 0,0),
			new EjPatternDef("RESPONSE CODE[ |\t]+: ([0-9]{3})", 0, 0,	AnalyzerCamWinCst.RESPONSE_CODE, 1, 0,0),
			new EjPatternDef("CODE REPONSE[ |\t]+: ([0-9]{3})", 0, 0,	AnalyzerCamWinCst.RESPONSE_CODE, 1, 0,0),
			new EjPatternDef("DATE ([0-9]{2}[\\-][0-9]{2}[\\-][0-9]{2})[ |\t]+TIME ([0-9]{2}[:][0-9]{2}[:][0-9]{2})", 0, 0, AnalyzerCamWinCst.DATE_TIME, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) <- TRANSACTION END", 0, 0, AnalyzerCamWinCst.END_TRX, 1, 0,0),
			new EjPatternDef("<- TRANSACTION END", 0, 0, AnalyzerCamWinCst.END_TRX, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) NOTES PRESENTED ([0-9]+[,][0-9]+[,][0-9]+[,][0-9]+)", 0, 0, AnalyzerCamWinCst.NOTES_PRESENTED, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) CASH TAKEN", 0,	0, AnalyzerCamWinCst.CASH_TAKEN, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) CASH PRESENTED",	0, 0, AnalyzerCamWinCst.CASH_PRESENTED, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) CASH RETRACTED",	0, 0, AnalyzerCamWinCst.CASH_RETRACTED, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) CARD\\(([0-9\\*]+)\\) RETAINED",	0, 0, AnalyzerCamWinCst.CARD_RETAINED_BY_ATM, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) SERVICEMODE ENTERED", 1, 0,	AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY, 1, 0,1),
			new EjPatternDef("CASH ([1-4]{1}):([1-4]{1}),([0-9]+)", 0, 0, AnalyzerCamWinCst.CASH, 1, 0,0),
			new EjPatternDef("CASH 1:([1-4]{1}),([0-9]+)", 0, 0, AnalyzerCamWinCst.CASH1, 0, 0,0),
			new EjPatternDef("CASH 2:([1-4]{1}),([0-9]+)", 0, 0, AnalyzerCamWinCst.CASH2, 0, 0,0),
			new EjPatternDef("CASH 3:([1-4]{1}),([0-9]+)", 0, 0, AnalyzerCamWinCst.CASH3, 0, 0,0),
			new EjPatternDef("CASH 4:([1-4]{1}),([0-9]+)", 0, 0, AnalyzerCamWinCst.CASH4, 0, 0,0),
			new EjPatternDef("PRESENTER ERROR", 0, 0, AnalyzerCamWinCst.PRESENTER_ERROR, 1, 0,0),
			new EjPatternDef("BILL/S RETRACTED", 0, 0, AnalyzerCamWinCst.BILLS_RETRACTED, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) CARD RETAINED BY HOST", 0, 0, AnalyzerCamWinCst.CARD_RETAINED, 1, 0,0),

			new EjPatternDef("([0-9]{2}[/][0-9]{2}[/][0-9]{2})[ |\t]+([0-9]{2}[:][0-9]{2}[:][0-9]{2})[ |\t]+([0-9]{6})[ |\t]+([0-9]+)",	0, 0, AnalyzerCamWinCst.LINE_DT, 1, 0,0),
			new EjPatternDef("([A-Z]{3})[ |\t]+([0-9]+[\\.][0-9]{2})", 0, 1, AnalyzerCamWinCst.AMOUNT, 1, 0,0),
			
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) SAFE DOOR CLOSED", 1, 0,	AnalyzerCamWinCst.SAFE_DOOR_CLOSE, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) SAFE DOOR OPENED", 1, 0,	AnalyzerCamWinCst.SAFE_DOOR_OPENED, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) COMMUNICATION OFFLINE", 1, 0,	AnalyzerCamWinCst.COMMUNICATION_OFFLINE, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) COMMUNICATION ONLINE", 1, 0,	AnalyzerCamWinCst.COMMUNICATION_ONLINE, 1, 0,0),
			new EjPatternDef("CUTOFF", 1, 0, AnalyzerCamWinCst.CUTOFF, 1, 1,0), 
			new EjPatternDef("ERROR:", 0, 0, AnalyzerCamWinCst.ACCEPTABLE, 1, 0,0),
			
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) GO OUT OF SERVICE COMMAND", 1, 0, AnalyzerCamWinCst.GO_OUT_OF_SERVICE_CMD, 1, 0,1),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) GO IN SERVICE COMMAND", 1, 0, AnalyzerCamWinCst.GO_IN_SERVICE_CMD, 1, 0,1),
			
			//CUTOFF
			new EjPatternDef ("APP TRN AMT : ([A-Z]{3})[ |\t]+([0-9]+[\\.][0-9]{2})", 0, 0, AnalyzerCamWinCst.CUT_APP_TRN_AMT,0,1,0),
			new EjPatternDef ("REV TRN AMT : ([A-Z]{3})[ |\t]+([0-9]+[\\.][0-9]{2})", 0, 0, AnalyzerCamWinCst.CUT_REV_TRN_AMT,0,1,0),
			new EjPatternDef ("APPSUSP AMT : ([A-Z]{3})[ |\t]+([0-9]+[\\.][0-9]{2})", 0, 0, AnalyzerCamWinCst.CUT_APPSUSP_AMT,0,1,0),
			new EjPatternDef ("MONNAIE     : ([A-Z]{3})", 0, 0, AnalyzerCamWinCst.CUT_MONNAIE,0,1,0),
			new EjPatternDef ("ARRETE NO.  : ([0-9]+)", 0, 0, AnalyzerCamWinCst.CUT_ARRETE_NO,0,1,0),
			new EjPatternDef ("ARRETE DATE : ([0-9]+)", 0, 0, AnalyzerCamWinCst.CUT_ARRETE_DATE,0,1,0),
			new EjPatternDef ("CAPTURE NBR.: ([0-9]+)", 0, 0, AnalyzerCamWinCst.CUT_CAPTURE_NBR,0,1,0),
			new EjPatternDef ("TRANCHE     : ([0-9]+)[\\-]([0-9]+)", 0, 0, AnalyzerCamWinCst.CUT_TRANCHE,0,1,0),
			new EjPatternDef ("APP TRN NBR : ([0-9]+)", 0, 0, AnalyzerCamWinCst.CUT_APP_TRN_NBR,0,1,0),
			new EjPatternDef ("REV TRN NBR : ([0-9]+)", 0, 0, AnalyzerCamWinCst.CUT_REV_TRN_NBR,0,1,0),
			new EjPatternDef ("APPSUSP NBR : ([0-9]+)", 0, 0, AnalyzerCamWinCst.CUT_APPSUSP_NBR,0,1,0),
			new EjPatternDef ("ACTUEL DATE : ([0-9]+)", 0, 0, AnalyzerCamWinCst.CUT_ACTUEL_DATE,0,1,0),
			new EjPatternDef ("CASHPWCS", 0, 0, AnalyzerCamWinCst.CUT_CASHPWCS,0,1,0),
			new EjPatternDef ("========================================", 0, 0, AnalyzerCamWinCst.CUT_END,0,1,0),
			new EjPatternDef ("THERE IS NO CUT OFF", 0, 0, AnalyzerCamWinCst.CUT_NO_CUTOFF,0,1,0),

			//SUPERVISOR MODE
			new EjPatternDef ("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) SERVICEMODE LEFT", 0, 0, AnalyzerCamWinCst.SUPERVISOR_MODE_EXIT,0,0,1),
			new EjPatternDef ("TYPE 1[ |\t]+TYPE 2", 0, 0, AnalyzerCamWinCst.TYPE_1_TYPE_2,0,0,1),
			new EjPatternDef ("CASSETTE[ |\t]*([0-9]+)[ |\t]+([0-9]+)", 0, 0, AnalyzerCamWinCst.K7_VALUES,0,0,1),
			new EjPatternDef ("REJECTED[ |\t]*([0-9]+)[ |\t]+([0-9]+)", 0, 0, AnalyzerCamWinCst.K7_REJECTS,0,0,1),
			new EjPatternDef ("REMAINING[ |\t]*([0-9]+)[ |\t]+([0-9]+)", 0, 0, AnalyzerCamWinCst.K7_REMAINING,0,0,1),
			new EjPatternDef ("DISPENSED[ |\t]*([0-9]+)[ |\t]+([0-9]+)", 0, 0, AnalyzerCamWinCst.K7_DISPENSED,0,0,1),
			new EjPatternDef ("TOTAL[ |\t]+([0-9]+)[ |\t]+([0-9]+)", 0, 0, AnalyzerCamWinCst.K7_TOTAL,0,0,1),
			new EjPatternDef ("TYPE 3[ |\t]+TYPE 4", 0, 0, AnalyzerCamWinCst.TYPE_3_TYPE_4,0,0,1),
			new EjPatternDef ("LAST CLEARED:[ |\t]+([0-9]{2}[/][0-9]{2}[/][0-9]{2})[ |\t]+([0-9]{2}[:][0-9]{2})", 0, 0, AnalyzerCamWinCst.LAST_CLEARED,0,0,1),
			new EjPatternDef ("CARDS CAPTURED[ |\t]+([0-9]+)", 0, 0, AnalyzerCamWinCst.CARDS_CAPTURED,0,0,1),
			new EjPatternDef ("ACTIVITY COUNT -[ |\t]+([0-9]+)", 0, 0, AnalyzerCamWinCst.ACTIVITY_COUNT,0,0,1),
			new EjPatternDef ("CARDS CLEARED[ |\t]+= ([0-9]+)", 0, 0, AnalyzerCamWinCst.CARDS_CLEARED,0,0,1),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) CASH COUNTERS BEFORE SOP", 0, 0,	AnalyzerCamWinCst.CASH_COUNTERS_BEFORE, 1, 0,1),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) CASH COUNTERS AFTER SOP", 0, 0,	AnalyzerCamWinCst.CASH_COUNTERS_AFTER, 1, 0,1),
			new EjPatternDef("CLEAR CASH", 0, 0,	AnalyzerCamWinCst.CASH_CLEAR, 1, 0,1),
			new EjPatternDef ("RETRACTS:[ |\t]+([0-9]+)", 0, 0, AnalyzerCamWinCst.RETRACTS,0,0,1),
			new EjPatternDef ("REJECTS:[ |\t]+([0-9]+)", 0, 0, AnalyzerCamWinCst.REJECTS,0,0,1),
			
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) CASH COUNTERS\\(", 1, 0,	AnalyzerCamWinCst.CASH_COUNTERS_PAREN, 0, 0,1),
			new EjPatternDef ("[A-Z]{3}[ |\t]+[0-9]{3}[ |\t]+([0-9]+)[ |\t]+([0-9]+)[ |\t]+([0-9]+)", 0, 0, AnalyzerCamWinCst.PAREN_CAS_VALUE,0,0,1),
			new EjPatternDef ("[A-Z]{3}[ |\t]+[0-9]{3}[ |\t]+([0-9]+)", 0, 0, AnalyzerCamWinCst.SOP_CAS_VALUE,0,0,1),

			
			new EjPatternDef("CASH COUNTERS", 0, 0, AnalyzerCamWinCst.SUPPLY_CASH_COUNTERS, 1, 0,0),
			new EjPatternDef("([0-9]{2}[:][0-9]{2}[:][0-9]{2}) SUPPLY COUNTERS:", 0, 0,	AnalyzerCamWinCst.SUPPLY_COUNTERS, 1, 0,1),
			new EjPatternDef ("CASSETTE:[ |\t]+([0-9]+) CASSETTE:[ |\t]*([0-9]+)", 0, 0, AnalyzerCamWinCst.SUPPLY_K7_VALUES,0,0,1),
			new EjPatternDef ("REJECTED:[ |\t]+([0-9]+) \\+REJECTED:[ |\t]*([0-9]+)", 0, 0, AnalyzerCamWinCst.SUPPLY_K7_REJECTS,0,0,1),
			new EjPatternDef ("REMAINING:[ |\t]+([0-9]+) =REMAINING:[ |\t]*([0-9]+)", 0, 0, AnalyzerCamWinCst.SUPPLY_K7_REMAINING,0,0,1),
			new EjPatternDef ("DISPENSED:[ |\t]+([0-9]+) \\+DISPENSED:[ |\t]*([0-9]+)", 0, 0, AnalyzerCamWinCst.SUPPLY_K7_DISPENSED,0,0,1),
			new EjPatternDef ("TOTAL:[ |\t]*([0-9]+) =TOTAL:[ |\t]*([0-9]+)", 0, 0, AnalyzerCamWinCst.SUPPLY_K7_TOTAL,0,0,1),
			new EjPatternDef("SUPPLIES COUNTERS", 0, 0,	AnalyzerCamWinCst.SUPPLY_SUPPLIES, 0, 0,1),
			
	};

	public void initProc(ServiceContext ctx, TopNe ne) {
		super.init(ctx, ne);
		ejArr = new ArrayList<EjPattern>();
		ejArrStart = new ArrayList<EjPattern>();
		ejArrAmt = new ArrayList<EjPattern>();
		ejArrCutOff = new ArrayList<EjPattern>();
		ejArrSupMode = new ArrayList<EjPattern>();
		
		for (EjPatternDef ejPatDef: winPatterns){
			addPattern(ejPatDef);
		}
		
		ejArrCash = new ArrayList<EjPattern>();
		Pattern p1 = Pattern.compile("1:([1-4]{1}),([0-9]+)");
		EjPattern ejP1 = new EjPattern();
		ejP1.setPattern(p1);
		ejArrCash.add(ejP1);
		
		Pattern p2 = Pattern.compile("2:([1-4]{1}),([0-9]+)");
		EjPattern ejP2 = new EjPattern();
		ejP2.setPattern(p2);
		ejArrCash.add(ejP2);
		
		Pattern p3 = Pattern.compile("3:([1-4]{1}),([0-9]+)");
		EjPattern ejP3 = new EjPattern();
		ejP3.setPattern(p3);
		ejArrCash.add(ejP3);
		
		Pattern p4 = Pattern.compile("4:([1-4]{1}),([0-9]+)");
		EjPattern ejP4 = new EjPattern();
		ejP4.setPattern(p4);
		ejArrCash.add(ejP4);
	}

	public EjCamAnalyzerSigma() {
		super();
		parCurrencyService=ApplicationContextHolder.getContext().getBean(ParCurrencyService.class);		
		ejrTransactionService=ApplicationContextHolder.getContext().getBean(EjrTransactionService.class);
		ejrArreteCentralService =ApplicationContextHolder.getContext().getBean(EjrArreteCentralService.class);
		ejrCashCounterClearedService=ApplicationContextHolder.getContext().getBean(EjrCashCounterClearedService.class);
		ejrCashCounterSopService=ApplicationContextHolder.getContext().getBean(EjrCashCounterSopService.class);
		ejrAlimentationService=ApplicationContextHolder.getContext().getBean(EjrAlimentationService.class);
		ejrServerCnxService=ApplicationContextHolder.getContext().getBean(EjrServerCnxService.class);
		ejrDeviceService=ApplicationContextHolder.getContext().getBean(EjrDeviceService.class);
		ejrCoffreEventService=ApplicationContextHolder.getContext().getBean(EjrCoffreEventService.class);
		ejrWincorErrorService=ApplicationContextHolder.getContext().getBean(EjrWincorErrorService.class);
		ejrWinErrMapService=ApplicationContextHolder.getContext().getBean(EjrWinErrMapService.class);
		ejrCassetteService=ApplicationContextHolder.getContext().getBean(EjrCassetteService.class);
		ejrCashCounterService=ApplicationContextHolder.getContext().getBean(EjrCashCounterService.class);
		ejrCountClearService=ApplicationContextHolder.getContext().getBean(EjrCountClearService.class);
		ejrRetractService=ApplicationContextHolder.getContext().getBean(EjrRetractService.class);
		monSeverityService=ApplicationContextHolder.getContext().getBean(MonSeverityService.class);
		monIssueService=ApplicationContextHolder.getContext().getBean(MonIssueService.class);
		topNeStateService=ApplicationContextHolder.getContext().getBean(TopNeStateService.class);
	}

	public static SimpleDateFormat dateTimesFormat = new SimpleDateFormat(
			"yyyy/MM/dd HH:mm:ss");

	public  ArrayList<MsgResponse> getCashResponse(String msg) {
		ArrayList<MsgResponse> ll = new ArrayList<MsgResponse>();
		int i;
		for (i = 0; i < ejArrCash.size(); i++) {
			Matcher m = ejArrCash.get(i).getPattern().matcher(msg);
			if (m.find()) {
				MsgResponse mResponse = new MsgResponse();
				mResponse.setMatcher(m);
				mResponse.setLine(msg);
				ll.add(mResponse);
			}
		}
		
		return ll;
	}
	
	
	//@Override
	protected int processLine2(ServiceContext ctx, String line, Date elogDate, String strFileDate) {
		logger.info("processLine --> line="+line);
		if (line == null) {
			logger.error("processLine --> Given line is null !!!");
			return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
		}
		if (line.length() == 0)
			return EjrFileProcessor.PROCESS_OK;

		// To Upper Case
		String newLine = line.toUpperCase();
		MsgResponse reponse = getStartResponse(newLine);
		int msgType = reponse.getMsgType();
		boolean end = false;
		int ret=0;
		while (!end) {
			logger.info("processLine while --> line="+line);
			switch (msgType) {
			case AnalyzerCamWinCst.START_TRX:
			case AnalyzerCamWinCst.TRA_CODE:
			case AnalyzerCamWinCst.TRACK_2_DATA:
			case AnalyzerCamWinCst.PIN_ENTRED:
			case AnalyzerCamWinCst.TRANS_REQ:
				if (msgType != AnalyzerCamWinCst.TRA_CODE){
					try {
						startDate = dateTimesFormat.parse(strFileDate + " "
								+ reponse.getMatcher().group(1));
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				ret=processTraComplete(ctx, newLine, elogDate, startDate, reponse.getMsgType());

				if (ret <= 0)
					return ret;
				else {
					newLine = this.lineToProcess.toUpperCase();
					reponse = getStartResponse(newLine);
					msgType = reponse.getMsgType();					
					break;
				}
				
			case AnalyzerCamWinCst.SAFE_DOOR_CLOSE :
			case AnalyzerCamWinCst.SAFE_DOOR_OPENED:
			case AnalyzerCamWinCst.COMMUNICATION_OFFLINE :
			case AnalyzerCamWinCst.COMMUNICATION_ONLINE :
			case AnalyzerCamWinCst.GO_IN_SERVICE_CMD :
			case AnalyzerCamWinCst.GO_OUT_OF_SERVICE_CMD :
			case AnalyzerCamWinCst.START_DATE_TIME:
				try {
					startDate = dateTimesFormat.parse(strFileDate+ " " +reponse.getMatcher()
						.group(1));
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				return EjrFileProcessor.PROCESS_OK;
			
			case AnalyzerCamWinCst.CUTOFF:
				ret=processCutOff(ctx, newLine, elogDate, this.startDate);

				if (ret <= 0)
					return ret;
				else {
					newLine = this.lineToProcess.toUpperCase();
					reponse = getStartResponse(newLine);
					msgType = reponse.getMsgType();	
					break;
				}
			
			case AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY:
				try {
					startDate = dateTimesFormat.parse(strFileDate+ " " +reponse.getMatcher()
						.group(1));
				} catch (ParseException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				}
				ret= processSupMode(ctx, newLine, elogDate, this.startDate, strFileDate);
			
				if (ret <= 0)
					return ret;
				else {
					newLine = this.lineToProcess.toUpperCase();
					reponse = getStartResponse(newLine);
					msgType = reponse.getMsgType();	
					break;
				}
			
			case AnalyzerCamWinCst.CASH_COUNTERS_PAREN:
				try {
					startDate = dateTimesFormat.parse(strFileDate+ " " +reponse.getMatcher()
						.group(1));
				} catch (ParseException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				}
				ret= readParenCashCounter(ctx, startDate, newLine, false);
			
				if (ret <= 0)
					return ret;
				else {
					newLine = this.lineToProcess.toUpperCase();
					reponse = getStartResponse(newLine);
					msgType = reponse.getMsgType();	
					break;
				}

			default:
				return EjrFileProcessor.PROCESS_OK;
			}
		}
		return EjrFileProcessor.PROCESS_OK;
	}
	
	@Override
	protected int processLine(ServiceContext ctx, String line, Date elogDate, String strFileDate) {
		logger.info("processLine --> line="+line);
		if (line == null) {
			logger.error("processLine --> Given line is null !!!");
			return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
		}
		if (line.length() == 0)
			return EjrFileProcessor.PROCESS_OK;

		// To Upper Case
		String newLine = line.toUpperCase();
		
        // Traitement selon le cas		
        
		if(newLine.contains("-------------------------"))
        	return processTraComplete2(ctx,line);
		if(newLine.contains("NOTES PRESENTED"))
            notesPresentedLine=newLine;
		if(newLine.contains("CASH TAKEN") && lastTransaction!=null){
            lastTransaction.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_YES);
            lastTransaction=ejrTransactionService.save(ctx,lastTransaction);
        }
		
		if(newLine.contains("NOTES RETRACTED") && lastTransaction!=null){
            lastTransaction.setTraRetract(EjrTransactionCsts.TRA_RETRACT_YES);
            lastTransaction.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_NO);
            lastTransaction=ejrTransactionService.save(ctx,lastTransaction);
                        
            EjrRetract ret = ejrRetractService.getLastRetract(ctx, getTopNe());
            if (ret==null){
                ret=new EjrRetract();
                ret.setRetDate(lastTransaction.getTraTraDate());
                ret.setRetBanId(lastTransaction.getTraBanId());
                ret.setRetNeId(getTopNe());
                ret.setRetNbrTraAuj(1);
                ret.setRetNbrTraTotal(1);
                ret.setRetNbrTraLast(0);
                
                ejrRetractService.save(ctx, ret);
            }
            else{
                SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
                if(format.format(lastTransaction.getTraInsDate()).equals(format.format(ret.getRetDate()))){
                    ret.setRetNbrTraAuj(ret.getRetNbrTraAuj()+1);
                    ret.setRetNbrTraTotal(ret.getRetNbrTraTotal()+1);
                }                
                else{
                    ret.setRetNbrTraAuj(1);
                    ret.setRetNbrTraTotal(ret.getRetNbrTraTotal()+1);
                }
                ejrRetractService.save(ctx, ret);
            }
            
            lastTransaction=null;
        }
        
		if ((newLine.contains("SST OFF-LINE")) || (newLine.contains("SST ON-LINE")))
            return processCommLine(ctx,newLine);
        
        if (newLine.contains("CASH COUNTERS BEFORE SOP"))
            return countersBeforeAfterSop(ctx,newLine);

        if(newLine.contains("SUPERVISOR MODE ENTRY"))
            return processSupMode(ctx,newLine);
        if (newLine.contains("SAFE DOOR OPENED") || newLine.contains("SAFE DOOR CLOSED") ){
            return processSafeDoor(ctx,newLine);
        }
        
       /* if(newLine.contains("ERROR"))
            return processErrorLine(ctx,newLine);*/
        
        if(newLine.contains("TYPE1-10000")) //SUPERVISOR MODE ENTRY
            return processCassetteState(ctx,newLine);

        if ((newLine.contains("CASSETTE REMOVED"))
                || (newLine.contains("REJECT BIN REMOVED"))
                || (newLine.contains("REJECT BIN INSERTED"))
                || (newLine.contains("CASSETTE INSERTED"))
        		|| (newLine.contains("SAFE DOOR"))){
             return processSafeDoor(ctx,newLine);
        }
        
        if (newLine.contains("ERROR")){
             return processDevice(ctx,newLine);
        }
        
        lastProcessedLine=line;

		return EjrFileProcessor.PROCESS_OK;
	}
	
	 private int processCassetteState(ServiceContext ctx,String line){

    	 System.out.println("processCassetteState "+line);
    	 
    	 int firstLine = this.getLastLine();
        if(!line.contains("TYPE1-10000") ) 
        {
            logger.error("Supmode line do not contain 'TYPE1-10000' at line :"+firstLine);
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }
        // La date
        Date evDate=null;
  
        evDate = this.getDateFromLineSafe(lineBefore,true);
        if (lastEventDate!=null)
        {
            if ((evDate==null)|| (!evDate.after(lastEventDate)))
                evDate = new Date(lastEventDate.getTime()+1000);
        }
        if(lastRetraitDate!=null)
        {
            if ((evDate==null)|| (!evDate.after(lastRetraitDate)))
                evDate = new Date(lastRetraitDate.getTime()+1000);
        }
        
        if (evDate == null)
        	return EjrFileProcessor.PROCESS_NOK_INCORRECT_DATE_FORMAT;

        lastEventDate=evDate;
        
        String newLine=line;
  
        String lineToProcess="";
       
        while(!newLine.contains("LAST CLEARED"))//SUPERVISOR MODE EXIT"))
        {
            if(newLine.contains("TYPE1-10000 TYPE2-5000"))
            {
                if ((lastEventDate!=null) && (!evDate.after(lastEventDate)))
                    evDate = new Date(lastEventDate.getTime()+1000);

                readCashCounter(ctx,evDate,newLine,this.cashCleard);

                if ((lastEventDate!=null) && (!evDate.after(lastEventDate)))
                    evDate = new Date(lastEventDate.getTime()+1000);                
            }
            else if ((newLine.contains("CASSETTE REMOVED"))
            || (newLine.contains("REJECT BIN REMOVED"))
            || (newLine.contains("REJECT BIN INSERTED"))
            || (newLine.contains("CASSETTE INSERTED"))){
             
                this.processSafeDoor(ctx,newLine);

            }

            else if (this.containsKeyWord(newLine))
            {
                lineToProcess=newLine;
                break;
            }
            
            lineBefore=newLine;
			lastLine++;               
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
        }

        if(lineToProcess.length()>0)
            return processLine(ctx,lineToProcess,null,null);

        return EjrFileProcessor.PROCESS_OK;
     }
	 
	 private Date getDateFromLineSafe(String line,boolean year4Digit)
	    {
	    	System.out.println("getDateFromLineSafe "+line);
	    	// La date
	        if((line==null)&&(line.length()<1))
	                 return null;

	        // La date        
	        Date evDate=null;

	        String strDate="";
	        String ligne=line.replace("*", " ");
	        String[] lignes=ligne.split("[\\s]+");
	        strDate=lignes[1];
	        
	        SimpleDateFormat dateTimesFormat=new SimpleDateFormat("yy/MM/dd HH:mm:ss");

	         try {
	            String dateStr=lignes[1]+" "+lignes[2];
	            if(dateStr.length()==14)
	                dateStr=dateStr+":00";
	            
	            evDate = dateTimesFormat.parse(dateStr);
	        } catch (ParseException ex) {
	            logger.error("Error in date"+strDate+" ex:"+ex.getMessage());
	            ex.printStackTrace();
	        }
	    
	        return evDate;
	    }
	    

	private String getLine(String oldLine) {
		if(this.lines==null || this.lines.size()==0) {
			logger.error("getLine -> this.lines is null or empty");
			return null;
		}
		try {
			return this.lines.remove(0);			
        }
        catch(Exception e) {
        	logger.error("getLine -> beforeLine ="+oldLine);
        	return null;
        }
	}
	
	private int processLastTraFromLastLog(ServiceContext ctx, String line){
		System.out.println("processLastTraFromLastLog "+line);
		String newLine="";
		while(!newLine.contains("TRANSACTION END"))
        {
            
            lastLine++;
            newLine=getLine(newLine);   
			lastTransactionBlock.getLines().add(newLine);			
        }
		
		
		
		return EjrFileProcessor.PROCESS_OK;
	}
	

    private int processSupMode(ServiceContext ctx,String line){

	   System.out.println("processSupMode "+line);
	   	 
	   int firstLine = this.getLastLine();
	   if(!line.contains("SUPERVISOR MODE ENTRY") ) //SUPERVISOR MODE ENTRY
	    {
           logger.error("Supmode line do not contain 'SUPERVISOR MODE ENTRY' at line :"+firstLine);
           return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
       }
       // La date
       Date evDate=null;
       //Date dateDeb=null;
       //Date dateFin=null;

       //boolean coffreOuvert=false;

       evDate = this.getDateFromLine(lineBefore,true);
       System.out.println("evDate="+evDate);
       if (lastEventDate!=null)
       {
           if ((evDate==null)|| (!evDate.after(lastEventDate)))
               evDate = new Date(lastEventDate.getTime()+1000);
       }
       if(lastRetraitDate!=null)
       {
           if ((evDate==null)|| (!evDate.after(lastRetraitDate)))
               evDate = new Date(lastRetraitDate.getTime()+1000);
       }
       
       if (evDate == null)
           return EjrFileProcessor.PROCESS_NOK_INCORRECT_DATE_FORMAT;

       lastEventDate=evDate;
       
       String newLine=line;
       try {
               lineBefore=newLine;
               lastLine++;
               newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
           }
       catch (Exception ex) {
               logger.error("Error reading log file :"+this.getCurrentFile()+" at line :"+this.getLastLine()+1+" with reason :"+ex.getMessage());
               lastLine=firstLine;
               return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
       }

       String lineToProcess="";
      
       while(!newLine.contains("SUPERVISOR MODE EXIT"))
       {
    	   if(newLine.contains("TYPE1-10000 TYPE2-5000"))
           {
               if ((lastEventDate!=null) && (!evDate.after(lastEventDate)))
                   evDate = new Date(lastEventDate.getTime()+1000);

               readCashCounter(ctx,evDate,newLine,this.cashCleard);

               if ((lastEventDate!=null) && (!evDate.after(lastEventDate)))
                   evDate = new Date(lastEventDate.getTime()+1000);                
           }
    	   else if (newLine.contains("SAFE DOOR OPENED") || newLine.contains("SAFE DOOR CLOSED") ){
               this.processSafeDoor(ctx,newLine);
           }
           else if ((newLine.contains("CASSETTE REMOVED"))
           || (newLine.contains("REJECT BIN REMOVED"))
           || (newLine.contains("REJECT BIN INSERTED"))
           || (newLine.contains("CASSETTE INSERTED"))){
           

              /*coffreOuvert=true;
              Date coeDate=getDateFromLine(lineBefore,true);
              if(coeDate!=null){
                  if((newLine.contains("REMOVED")&&(dateDeb==null))){
                      dateDeb=coeDate;
                  }
                  else if(newLine.contains("INSERTED")){
                      if ((dateFin==null) || (coeDate.after(dateFin)))
                          dateFin=coeDate;
                  }
              }
              if ((coeDate!=null) && (!evDate.after(coeDate)))
                   evDate = new Date(coeDate.getTime()+1000);
               * */
               //this.processSafeDoor(ctx,newLine);

           }
           else if (newLine.contains("CARDS CAPTURED"))
           {              
               this.cashCleard=true;                        
               //processCardCaptured(ctx,newLine);                
           }
           else if (newLine.contains("CASH COUNTS CLEARED"))
           {              
               this.cashCleard=true;
           }
           else if (newLine.contains("CASH ADDED"))
           {
                Date lastEventDate = this.getDateFromLineSafe(lineBefore,true);
               	if ((lastEventDate!=null) && (!evDate.after(lastEventDate)))
                   evDate = new Date(lastEventDate.getTime()+1000);

                logger.info("lastEventDate avant --CashAdded--: "+lastEventDate);
                //if(processCashAdded(evDate,newLine,this.cashCleard)==LogAnalyser.LOG_ANALYSER_REFRESH_OK)
                   if(this.processCashAdded(ctx,evDate,newLine,this.cashCleard)!=EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR)
                       this.cashCleard=false;

                logger.info("lastEventDate apres --CashAdded--: "+lastEventDate);
                if ((lastEventDate!=null) && (!evDate.after(lastEventDate)))
                   evDate = new Date(lastEventDate.getTime()+1000);
               
           }
           else if (this.containsKeyWord(newLine))
           {
               lineToProcess=newLine;
               break;
           }
           
           try {
               lineBefore=newLine;
               lastLine++;
               newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
           } catch (Exception ex) {
               logger.error("Error reading log file :"+this.getCurrentFile()+" at line :"+this.getLastLine()+1+" with reason :"+ex.getMessage());
               lastLine=firstLine;
               return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
           }
       }

       /*
       if(coffreOuvert)
       {
           if((dateDeb==null)&&(dateFin==null))
           {
               dateDeb=evDate;
               dateFin=new Date(dateDeb.getTime()+60000);                
           }
           else if(dateDeb==null){
               dateDeb=new Date(dateFin.getTime()-60000);
           }
           else if(dateFin==null){
               dateFin=new Date(dateDeb.getTime()+60000);
           }
           else if (!dateFin.after(dateDeb)){
               dateFin=new Date(dateDeb.getTime()+60000);
           }
           insererCoe(dateDeb,dateFin);
       }
        * */

       if(lineToProcess.length()>0)
           return processLine(ctx,lineToProcess,null,null);

       return EjrFileProcessor.PROCESS_OK;
    }
    
    private int processLastCleared(ServiceContext ctx,String newLine,String before,Date cocDate) {
   	 	System.out.println("processLastCleared "+newLine);
   	 	System.out.println("processLastCleared before "+before);
   	 	logger.debug("processLastCleared");
        logger.debug(before);
        logger.debug(newLine);
        logger.debug(cocDate);

       if(!newLine.contains("LAST CLEARED"))
       {
           logger.error("ProcessCountClear line does not contain 'LAST CLEARED' !!!");
           return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
       }
       //date
       Date evDate=null;
       if(!newLine.contains("00/00/00"))
       {
           logger.debug("newLine contains 00/00/00");
           String newLine1=newLine.replace("LAST CLEARED","");
           evDate=this.getDateFromLine(newLine1, false);
       }
       else
       {

       }
       logger.debug("evDate "+evDate);

       //Type
       int type=CLEAR_TYPE_UNKNOWN;
       int nombre = 0;

       if(before.contains("=TOTAL         00000     00000"))
           type=CLEAR_TYPE_CASH;

       else if(before.contains("CARDS CAPTURED"))
       {
           type=CLEAR_TYPE_CARD;
           int pos=before.indexOf("CARDS CAPTURED");
           if (pos != -1)
               pos=0;
           
           if(before.trim().length()>pos+22){
               logger.debug("Nombre :"+before.substring(pos+19, pos+24));
               nombre = Integer.parseInt(before.substring(pos+19, pos+24).trim());
           }
           else
               return EjrFileProcessor.PROCESS_OK;
       }

     //insérer l'evenement
        EjrCountClear clear=null;
       
        List<EjrCountClear> clears=ejrCountClearService.findByAtmType(ctx, getTopNe(), type);
        if((clears==null)||(clears.isEmpty())){
            logger.debug("No clear found in db");
            System.out.println("processLastCleared No clear found in db");
            //this.dbGab.getGabId()
            clear=new EjrCountClear();
            clear.setCocNeId(getTopNe());
            clear.setCocNombre(nombre);
            clear.setCocType(type);
            clear.setCocClearDate(evDate);
            clear.setCocDate(cocDate);            
            
            ejrCountClearService.save(ctx, clear);
            System.out.println("CountClearManager.insert==================>"+clear);
        }
        else
        {
            clear=clears.get(0);
            clear.setCocNombre(nombre);
            if(evDate!=null)
               clear.setCocClearDate(evDate);
            clear.setCocDate(cocDate);
            ejrCountClearService.save(ctx, clear);
        }

        if ((clear!=null) && (clear.getCocType()==CLEAR_TYPE_RETRACT))
           this.updateRetract(ctx,clear.getCocDate());

     return EjrFileProcessor.PROCESS_OK;
   }
    
    private int processCashAdded(ServiceContext ctx,Date evDate,String line,boolean cashCleard) 
    {
   	 System.out.println("processCashAdded "+line);
   	 
   	 int firstLine=this.getLastLine();
        String newLine=line;
        //saut
        try {
               lastLine++;
               newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
        } catch (Exception ex) {
               logger.error("Error reading log file :"+this.getCurrentFile()+" at line :"+this.getLastLine()+1+" with reason :"+ex.getMessage());
               lastLine=firstLine;
               return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }

        // TYPE 1 =  2034  TYPE 2 =  1036
        if ((!newLine.contains("TYPE 1 =")) || (!newLine.contains("TYPE 2 =")))
        {
            logger.error("Not well formatted cash add line at :"+firstLine);
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }
        int pos = newLine.indexOf("TYPE 1 =");
        int cas1 = Integer.parseInt(newLine.substring(pos+8,pos+16).trim());
        int cas2 = Integer.parseInt(newLine.substring(pos+24,pos+30).trim());

        //saut
        try {
               lastLine++;
               newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
        } catch (Exception ex) {
               logger.error("Error reading log file :"+this.getCurrentFile()+" at line :"+this.getLastLine()+1+" with reason :"+ex.getMessage());
               lastLine=firstLine;
               return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }

        // TYPE 3 =  2034  TYPE 4 =  1036
        if ((!newLine.contains("TYPE 3 =")) || (!newLine.contains("TYPE 4 =")))
        {
            logger.error("Not well formatted cash add line at :"+firstLine);
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }
        pos = newLine.indexOf("TYPE 3 =");
        int cas3 = Integer.parseInt(newLine.substring(pos+8,pos+16).trim());
        int cas4 = Integer.parseInt(newLine.substring(pos+24,pos+30).trim());

        if ((cas1==0)&&(cas2==0)&&(cas3==0)&&(cas4==0))
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
                 
        /*if   ((lastCashFileName!=null)
            &&(lastCashFileName.length()>0)
            &&(lastCashLine>0)
            &&(lastCashFileName.compareTo(this.getCurrentFile())==0)
            &&(lastCashLine>=firstLine))
        {
            return LogAnalyser.LOG_ANALYSER_REFRESH_OK;
        }*/
        if(this.cashAlreadyProc(ctx,evDate, firstLine))
        {
            logger.info("processCashAdded---lastLine: "+lastLine);
            return EjrFileProcessor.PROCESS_OK;
        }
        
       EjrCashCounter cash= new EjrCashCounter();
       cash.setCacNeId(getTopNe());
       
       Date realDate = this.getDateFromLine(lineBefore,true);

       if ((realDate == null) || (!realDate.after(evDate)))
           realDate=evDate;     

       this.lastEventDate=realDate;

       cash.setCacDate(realDate);

       //cash.setCacTraite(""+CASH_TRAITE_INST);
       cash.setCacType(""+CASH_COUNTER_TYPE_P);

        // insert data
        cash.setCacCas1Tot(cas1);
        cash.setCacCas1Disp(0);
        cash.setCacCas1Rej(0);

        cash.setCacCas2Tot(cas2);
        cash.setCacCas2Disp(0);
        cash.setCacCas2Rej(0);

        cash.setCacCas3Tot(cas3);
        cash.setCacCas3Disp(0);
        cash.setCacCas3Rej(0);

        cash.setCacCas4Tot(cas4);
        cash.setCacCas4Disp(0);
        cash.setCacCas4Rej(0);

         //inserer cash
       /*cash.setCacCas1Val(ServerCtx.getInsatance().getGlobalParam().getGlpValCas1().intValue());
       cash.setCacCas2Val(ServerCtx.getInsatance().getGlobalParam().getGlpValCas2().intValue());
       cash.setCacCas3Val(ServerCtx.getInsatance().getGlobalParam().getGlpValCas3().intValue());
       cash.setCacCas4Val(ServerCtx.getInsatance().getGlobalParam().getGlpValCas4().intValue());*/
       cash.setCacCas1Etat(""+CASH_COUNTER_ETAT_O);
       cash.setCacCas2Etat(""+CASH_COUNTER_ETAT_O);
       cash.setCacCas3Etat(""+CASH_COUNTER_ETAT_O);
       cash.setCacCas4Etat(""+CASH_COUNTER_ETAT_O);

       //si il n'a pas fait cash cleared
       if(!cashCleard){
           EjrCashCounter lastCash = ejrCashCounterService.getCashBeforeDate(ctx,cash.getCacNeId(),cash.getCacDate());
           if(lastCash!=null){

               int[] notes=this.getCasNotes(ctx);

                cash.setCacCas1Tot(cas1+lastCash.getCacCas1Tot());
                cash.setCacCas1Disp(lastCash.getCacCas1Tot()-lastCash.getCacCas1Rej()-notes[0]);
                cash.setCacCas1Rej(lastCash.getCacCas1Rej());

                cash.setCacCas2Tot(cas2+lastCash.getCacCas2Tot());
                cash.setCacCas2Disp(lastCash.getCacCas2Tot()-lastCash.getCacCas2Rej()-notes[1]);
                cash.setCacCas2Rej(lastCash.getCacCas2Rej());

                cash.setCacCas3Tot(cas3+lastCash.getCacCas3Tot());
                cash.setCacCas3Disp(lastCash.getCacCas3Tot()-lastCash.getCacCas3Rej()-notes[2]);
                cash.setCacCas3Rej(lastCash.getCacCas3Rej());

                cash.setCacCas4Tot(cas4+lastCash.getCacCas4Tot());
                cash.setCacCas4Disp(lastCash.getCacCas4Tot()-lastCash.getCacCas4Rej()-notes[3]);
                cash.setCacCas4Rej(lastCash.getCacCas4Rej());
           }
       }

       cash.setCacLastcashLine(String.valueOf(firstLine));
       EjrCashCounter newCash = ejrCashCounterService.save(ctx,cash);
       System.out.println("CashCounterManager.insert==================>"+cash);
       logger.info("ProcessCashAdded!!:cashCounter est inséré:"+cash.getCacDate());
       logger.info("--ProcessCashAdded--lastEventDate: "+lastEventDate);
       if(this.getCurrentFile()!=null)
            lastCashFileName=this.getCurrentFile();
       lastCashLine=firstLine;
       if (newCash!=null)
       {
           calculCashAlim(ctx,cash);
           updateCass(ctx,cash);
       }
       else
       {
           logger.error("Not inserted");
           return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
       }
       
        return EjrFileProcessor.PROCESS_OK;
    }
       

    private boolean cashAlreadyProc(ServiceContext ctx,Date evDate,int lastLineNbr){

        if(evDate==null)
            return false;

        SimpleDateFormat formatD=new SimpleDateFormat("dd-MM-yyyy");
        
        EjrCashCounterDTO dto=new EjrCashCounterDTO();
        dto.addCriteriaInfo("=", EjrCashCounterProperties.cacNeId().id(), getTopNe().getId());
        dto.addCriteriaInfo("=", EjrCashCounterProperties.cacLastcashLine(), lastLineNbr);
        dto.addCriteriaInfo("<=", EjrCashCounterProperties.cacDate(), formatD.format(evDate)+" 23:59:59");
        dto.addCriteriaInfo(">=", EjrCashCounterProperties.cacDate(), formatD.format(evDate)+" 00:00:00");
        PagedResult<EjrCashCounter> myList=ejrCashCounterService.search(ctx, dto, PagingParameter.noLimits());        

        return ((myList!=null)&&(myList.getValues()!=null)&&(!myList.getValues().isEmpty()));

    }
    

	
	private int processTraComplete2(ServiceContext ctx, String line){

		System.out.println("processTraComplete3 "+line+"  lastProcessedLine="+lastProcessedLine);
    	
    	
		int firstLine = this.getLastLine();
        if(!line.contains("-------------------------"))
        {
        	logger.error("Transaction line do not contain '-------------------------' at line :"+firstLine);
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }       
        
        // Retrouver la date sur la line before
        String[] date = lastProcessedLine.split("[\\*]");
        Date startDate = null;
        if(date.length>=1 && lastProcessedLine.contains(":"))
            startDate=this.getDateForLine(date[1]);
        if(lastEventDate!=null)
         {
             if((startDate==null)||(lastEventDate.after(startDate)))
             {
                 startDate=new Date(lastEventDate.getTime()+1000);
                 lastEventDate=startDate;
             }
         }
		
		
        EjrTransaction tra = new EjrTransaction();
        ArrayList<EjrTransaction> traList = new ArrayList<EjrTransaction>();
        boolean cashProcessed=false;

        // Gab
        tra.setTraBanId(this.getTopNe().getNeBanId());
		tra.setTraBraId(this.getTopNe().getNeBraId());
		
		tra.setTraNeId(this.getTopNe());
        tra.setTraCashTaken(""+AnalyzerCamWinCst.CASH_TAKEN);
        tra.setTraRetract(""+AnalyzerCamWinCst.CASH_RETRACTED);
        //tra.setTraProcStatus(EjrTransactionCsts.TRANS_TRAITE_INST);
        //tra.setTraGabTraite(TransactionManager.ArrGab_TRAITE_INST);
        tra.setTraNote1(0);
        tra.setTraNote2(0);
        tra.setTraNote3(0);
        tra.setTraNote4(0);
        
        tra.setTraTraDate(startDate);

        String newLine=line;
        String cashLine="";
        String lineToProcess="";

        if(line.contains("-------------------------"))
        {
            System.out.println("newLine="+newLine);
            // Passer a la ligne suivante
            String line1=newLine;
            String line2="";
            String line3="";
            String line4="";
            String line5="";
            String line6="";

            lastLine++;                
			line2 = getLine(newLine);if (line2==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
			System.out.println("==>line2="+line2);
			lastLine++;
			line3 = getLine(newLine);if (line3==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
			System.out.println("==>line3="+line3);
			lastLine++;
			line4 = getLine(newLine);if (line4==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
			System.out.println("==>line4="+line4);


            tra.setTraBanId(this.getTopNe().getNeBanId());
    		tra.setTraBraId(this.getTopNe().getNeBraId());
    		
    		tra.setTraNeId(this.getTopNe());
    		tra.setTraCashTaken(""+AnalyzerCamWinCst.CASH_TAKEN);
            tra.setTraRetract(""+AnalyzerCamWinCst.CASH_RETRACTED);
            //tra.setTraTraite(TransactionManager.TRANS_TRAITE_INST);
            //tra.setTraGabTraite(TransactionManager.ArrGab_TRAITE_INST);
            tra.setTraNote1(0);
            tra.setTraNote2(0);
            tra.setTraNote3(0);
            tra.setTraNote4(0);

            newLine=line+" "+line2+" "+line3+" "+line4+" "+line5;


            newLine=newLine.toUpperCase();
            // Type transaction
            long type=EjrTransactionCsts.TRA_TYPE_UNKNOWN;
            if (newLine.contains("CASH WITHRAWAL")){
                type= EjrTransactionCsts.TRA_TYPE_RETRAIT;
            }
            else if (newLine.contains("BALANCE INQUIRY")){
                type= EjrTransactionCsts.TRA_TYPE_DEM_SOLDE;
            }
            else if (newLine.contains("ATM STATEMENT")){
                type= EjrTransactionCsts.TRA_TYPE_MIN_REL;
            }
            else if (newLine.contains("AUTHENTIFICATION")){
                type= EjrTransactionCsts.TRA_TYPE_AUTHEN;
            }
            else if (newLine.contains("CAPTURE DE CARTE")){
                type= EjrTransactionCsts.TRA_TYPE_CAP_CART;
            }
            else if (newLine.contains("TRANSACTION ANNULEE")){
                type= EjrTransactionCsts.TRA_TYPE_ANNULLE;

            }
            else
            {
                logger.error("Unknown transaction type===== ("+newLine+") at line :"+firstLine);
                //lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }
            tra.setTraType(type);
            if (type!=EjrTransactionCsts.TRA_TYPE_RETRAIT)
                tra.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_YES);

            if(type==EjrTransactionCsts.TRA_TYPE_AUTHEN) {
                    tra.setTraPan(line2.trim());

                    String[] lines=line3.split(" ");
                    String responseCode=lines[lines.length-1];
                    tra.setTraRespCode(responseCode.replace(":", ""));
            }

            if(type==EjrTransactionCsts.TRA_TYPE_DEM_SOLDE) {
                tra.setTraPan(line2.trim());    		
                String[] lines=line3.split("[\\s]+");    		

                String dateString=lines[0]+" "+lines[1];
                DateFormat dateFormat = new SimpleDateFormat("yy/MM/dd HH:mm:ss");
                Date evDate=null;
                try {
                    evDate = dateFormat.parse(dateString);
                    tra.setTraInsDate(evDate);
                } catch (ParseException ex) {
                    logger.error("Incorrect date format :"+dateString+" in file :"+this.getCurrentFile()+" at line No :"+this.lastLine+" first line="+firstLine);
                    ex.printStackTrace();
                }   

                tra.setTraRef(lines[2]);
                
                lastLine++;
				line5 = getLine(newLine);if (line5==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
				System.out.println("==>line5="+line5);
                String[] lines2=line4.split(" ");
                String responseCode=lines2[0];
                tra.setTraRespCode(responseCode.replace(":", ""));
                tra.setTraAccount(line5.replace("ACCOUNT :", ""));                
            }
            
            if(type==EjrTransactionCsts.TRA_TYPE_MIN_REL) {
                tra.setTraPan(line2.trim());    		
                String[] lines=line3.split("[\\s]+");    		

                String dateString=lines[0]+" "+lines[1];
                DateFormat dateFormat = new SimpleDateFormat("yy/MM/dd HH:mm:ss");
                Date evDate=null;
                try {
                    evDate = dateFormat.parse(dateString);
                    tra.setTraInsDate(evDate);
                } catch (ParseException ex) {
                    logger.error("Incorrect date format :"+dateString+" in file :"+this.getCurrentFile()+" at line No :"+this.lastLine+" first line="+firstLine);
                    ex.printStackTrace();
                }   

                tra.setTraRef(lines[2]);
                
                lastLine++;
				line5 = getLine(newLine);if (line5==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
				System.out.println("==>line5="+line5);
                String[] lines2=line4.split(" ");
                String responseCode=lines2[0];
                tra.setTraRespCode(responseCode.replace(":", ""));
                tra.setTraAccount(line5.replace("ACCOUNT :", ""));
            }

            if (type==EjrTransactionCsts.TRA_TYPE_RETRAIT) {
                String[] lines=line2.split("[\\s]+");
                tra.setTraPan(lines[2].replace(":", ""));    		
                lines=line3.split("[\\s]+");  
                String dateString=lines[0]+" "+lines[1];
                DateFormat dateFormat = new SimpleDateFormat("yy/MM/dd HH:mm:ss");
                Date evDate=null;
                try {
                    evDate = dateFormat.parse(dateString);
                    tra.setTraInsDate(evDate);
                } catch (ParseException ex) {
                    logger.error("Incorrect date format :"+dateString+" in file :"+this.getCurrentFile()+" at line No :"+this.lastLine+" first line="+firstLine);
                    ex.printStackTrace();
                }   
                tra.setTraRef(lines[2]);
                lines=line4.split("[\\s]+");
                tra.setTraAmount(new BigDecimal(lines[1].replace(":", "")));    		

                lastLine++;                    
				line5 = getLine(newLine);if (line5==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
				System.out.println("==>line5="+line5);
				lastLine++;
				line6 = getLine(newLine);if (line6==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
				System.out.println("==>line6="+line6);
                
                tra.setTraRespCode(line5.replace("RESPONSE :", ""));
                tra.setTraAccount(line6.replace("ACCOUNT :", "")); 
                
                if(tra.getTraAccount().trim().equals(""))
                    tra.setTraType(EjrTransactionCsts.TRANS_TYPE_RETRAIT_SANS_CARTE);
                
                String ligne=notesPresentedLine;
                int pos=-1;
                if(ligne!=null)
                      pos=ligne.indexOf("NOTES PRESENTED");
                if(pos>=0) {
                    
                    String note=ligne.substring(pos);
                    note=note.replace("NOTES PRESENTED:","");
                    lines=note.split(",");

                    tra.setTraNote1(Integer.parseInt(lines[0]));
                    tra.setTraNote2(Integer.parseInt(lines[1]));
                    tra.setTraNote3(Integer.parseInt(lines[2]));
                    tra.setTraNote4(Integer.parseInt(lines[3]));
                    
                    updateCashPresented(ctx,notesPresentedLine,tra.getTraTraDate());
                    notesPresentedLine="";
                }
                
                if(!tra.getTraRespCode().equals("00"))
                    tra.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_NO);
            }
            
            if(tra.getTraTraDate()==null)
                tra.setTraTraDate(tra.getTraInsDate());
            
            lastTransaction=ejrTransactionService.save(ctx, tra);
            System.out.println("=====>Transaction:"+lastTransaction);
            
            if(tra.getTraRespCode().equals("04") 
                        || tra.getTraRespCode().equals("33")
                        || tra.getTraRespCode().equals("34")
                        || tra.getTraRespCode().equals("35")
                        || tra.getTraRespCode().equals("36")
                        || tra.getTraRespCode().equals("37")
                        || tra.getTraRespCode().equals("38")
                        || tra.getTraRespCode().equals("41")
                        || tra.getTraRespCode().equals("43")
                        || tra.getTraRespCode().equals("54")
                        || tra.getTraRespCode().equals("67")
                        || tra.getTraRespCode().equals("67")
                        || tra.getTraRespCode().equals("75")){
                /*BrsCardCapture obj=new BrsCardCapture(tra.getTraGabId(),tra.getTraDate(), tra.getTraCardNbr(),tra.getTraResponseCode(),CardCapManager.ACT_INSTANCE,null);
                CardCapManager.insert(obj);*/
            }
            else if(line4.matches("CARD.*RETAINED")){
                /*BrsCardCapture obj=new BrsCardCapture(tra.getTraGabId(),tra.getTraDate(), tra.getTraCardNbr(),tra.getTraResponseCode(),CardCapManager.ACT_INSTANCE,null);
                CardCapManager.insert(obj);*/
            }

        }

        
        //lastLine=firstLine+1;
        return EjrFileProcessor.PROCESS_OK;
    }
	

    private int countersBeforeAfterSop(ServiceContext ctx,String line){
       //10:54:07 CASH COUNTERS BEFORE SOP
        System.out.println("countersBeforeAfterSop="+line);
        boolean fillBefore = false;
        if(!line.contains("CASH COUNTERS BEFORE SOP"))
        {
            logger.error("countersBeforeAfterSop line does not contain 'CASH COUNTERS BEFORE SOP' !!!");
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }

        fillBefore = true;

        int firstLine = this.getLastLine();
        int[] countersBefore=new int[6];
        for(int i=0;i<countersBefore.length;i++)
            countersBefore[i]=0;

        int[] countersAfter=new int[6];
        for(int i=0;i<countersAfter.length;i++)
            countersAfter[i]=0;

        int[] countersTemp=new int[6];
        for(int i=0;i<countersTemp.length;i++)
            countersTemp[i]=0;

        String newLine=line;
        
        //Date
        String[] chaines = newLine.split("[\\s]+");
        Date date=getDateForLine(chaines[0]);
        System.out.println("countersBeforeAfterSop date="+date);
        if (date == null)
        {
            if (lastEventDate==null)
            	return EjrFileProcessor.PROCESS_NOK_INCORRECT_DATE_FORMAT;
            else
                date = new Date(lastEventDate.getTime()+1000);
        }
        lastEventDate=date;
        
        int boucle = 2;


        try {
            while(boucle > 0)
            {
                boolean rejet=false;
                int cas100 = 0;
                int cas200 = 1;
                int cas = 0;
                
                while(!rejet)
                {
                    lastLine++;
                    newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
                    if (newLine.contains("REJECTS"))
                    {
                        chaines = newLine.split("[\\s]+");
                        if (chaines[chaines.length-1].contains("*"))
                        {
                            String[] souschaines = chaines[chaines.length-1].split("[\\*]");
                            countersTemp[5]=Integer.parseInt(souschaines[0]);
                        }
                        else
                            countersTemp[5]=Integer.parseInt(chaines[chaines.length-1]);

                        rejet=true;
                    }
                    else if (newLine.contains("RETRACTS"))
                    {
                        chaines = newLine.split("[\\s]+");
                        if (chaines[chaines.length-1].contains("*"))
                        {
                            String[] souschaines = chaines[chaines.length-1].split("[\\*]");
                            countersTemp[4]=Integer.parseInt(souschaines[0]);
                        }
                        else
                            countersTemp[4]=Integer.parseInt(chaines[chaines.length-1]);

                    }
                    /*------------------- Debut Bug 1088 ----------------------*/
                    // else if (newLine.contains("MAD"))
                    else if (newLine.contains("CFA")||newLine.contains("cfa"))
                    /*-------------------  Fin  Bug 1088 ----------------------*/
                    {
                        chaines = newLine.split("[\\s]+");
                        if ((chaines!=null)&&(chaines.length>2)&&(Integer.parseInt(chaines[2])!=0))
                        {
                            if (Integer.parseInt(chaines[2]) ==10000)
                            {
                                cas=cas100;
                                cas100+=2;
                            }
                            else
                            {
                                cas=cas200;
                                cas200+=2;
                            }
                            if (chaines[3].contains("*"))
                            {
                                String[] souschaines = chaines[3].split("[\\*]");
                                countersTemp[cas]=Integer.parseInt(souschaines[0]);
                            }
                            else
                                countersTemp[cas]=Integer.parseInt(chaines[3]);
                        }
                    }
                    else if(this.containsKeyWord(newLine)){
                        logger.error("countersBeforeAfterSop --> Bloc not well formed at line "+firstLine+1);
                        return EjrFileProcessor.PROCESS_OK;
                    }
                }

                //   10:54:07 CASH COUNTERS AFTER SOP
                lastLine++;
                newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK;}                

                if (fillBefore)
                {
                    for(int i=0;i<countersTemp.length;i++)
                    {
                        countersBefore[i]=countersTemp[i];
                        countersTemp[i]=0;
                    }
                    fillBefore=false;
                }
                else
                {
                    for(int i=0;i<countersTemp.length;i++)
                    {
                        countersAfter[i]=countersTemp[i];
                        countersTemp[i]=0;
                    }
                    fillBefore=true;
                }
                boucle-=1;
            }
            
        } catch (Exception ex) {
            logger.error("Error reading log file :"+this.getCurrentFile()+" at line :"+this.getLastLine()+1+" with reason :"+ex.getMessage());
            lastLine=firstLine;
            ex.printStackTrace();
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }

        // Inserer le count des retracts dans tous les cas
        processRetractCount(ctx,countersAfter[4], date);

        int rej1=0;
        int rej2=0;
        if(countersAfter[5]==2)
        {
            rej1=1;
            rej2=1;
        }

        // Is Cash Clear
        boolean cashClear=false;
        if(
                ((countersAfter[0]==0)&&(countersAfter[1]==0)&&(countersAfter[2]==0)&&(countersAfter[3]==0)&&(countersAfter[4]==0)&&(countersAfter[5]==0))
                &&
                ((countersBefore[0]!=0)||(countersBefore[1]!=0)||(countersBefore[2]!=0)||(countersBefore[3]!=0)||(countersBefore[4]!=0)||(countersBefore[5]!=0))
          )
        {
            cashClear=true;
            countersAfter[0]=countersBefore[0];
            countersAfter[1]=countersBefore[1];
            countersAfter[2]=countersBefore[2];
            countersAfter[3]=countersBefore[3];
            countersAfter[4]=countersBefore[4];
            countersAfter[5]=countersBefore[5];
        }
        
        // Recuperer le dernier cash counter
        EjrCashCounter newcash=null;
        EjrCashCounter cash = ejrCashCounterService.getCashBeforeDate(ctx,getTopNe(), date);
        if (cash==null)
        {
        	newcash=new EjrCashCounter();
        	newcash.setCacNeId(getTopNe());
        	newcash.setCacDate(date);
        	newcash.setCacType(""+CASH_COUNTER_TYPE_P);
        	newcash.setCacCas1Val(glpValCas1);
        	newcash.setCacCas1Tot(countersAfter[0]+rej1);
        	newcash.setCacCas1Disp(0);
        	newcash.setCacCas1Rej(rej1);
        	newcash.setCacCas1Etat(""+CASH_COUNTER_ETAT_O);
        	newcash.setCacCas2Val(glpValCas2);
        	newcash.setCacCas2Tot(countersAfter[1]+rej2);
        	newcash.setCacCas2Disp(0);
        	newcash.setCacCas2Rej(rej2);
        	newcash.setCacCas2Etat(""+CASH_COUNTER_ETAT_O);
        	newcash.setCacCas3Val(glpValCas3);
        	newcash.setCacCas3Tot(countersAfter[2]);
        	newcash.setCacCas3Disp(0);
        	newcash.setCacCas3Rej(0);
        	newcash.setCacCas3Etat(""+CASH_COUNTER_ETAT_O);
        	newcash.setCacCas4Val(glpValCas4);
        	newcash.setCacCas4Tot(countersAfter[3]);
        	newcash.setCacCas4Disp(0);
        	newcash.setCacCas4Rej(0);
        	newcash.setCacCas4Etat(""+CASH_COUNTER_ETAT_O);
        	newcash.setCacCarte(0);        	
        	newcash.setCacClear(""+CASH_CLEAR_NO);
        	newcash.setCacDepos(0);
        	newcash.setCacRetract(countersAfter[4]);
        	newcash.setCacLastcashLine(String.valueOf(lastLine));
            
            if(cashClear){
                newcash.setCacClear(""+CASH_CLEAR_YES);
            }
            
            System.out.println("CashCounterManager.insert==================>"+newcash);
            
            ejrCashCounterService.save(ctx,newcash);
            //log.error("insert cashCounter in methode: countersBeforeAfterSop si cash before est null!!!!! "+newcash.getCacCas1Tot()+" "+newcash.getCacCas2Tot());
            if ((newcash!=null)&&(newcash.getCacClear().compareTo(""+CASH_CLEAR_YES)!=0))
            {
                //calculCashAlim(newcash);
                updateCass(ctx,newcash);
            }
            return EjrFileProcessor.PROCESS_OK;

        }

        // Si il y a eu changement
       if (
                (countersBefore[0]==countersAfter[0])
            &&  (countersBefore[1]==countersAfter[1])
            &&  (countersBefore[2]==countersAfter[2])
            &&  (countersBefore[3]==countersAfter[3])
            &&  (countersBefore[5]==countersAfter[5])
            &&  (!cashClear)
            )
        {
    	   return EjrFileProcessor.PROCESS_OK;
        }

        newcash = new EjrCashCounter();
        newcash.setCacNeId(cash.getCacNeId());
        newcash.setCacDate(date);
        //newcash.setCacTraite(""+CASH_TRAITE_INST);
        newcash.setCacType(""+CASH_COUNTER_TYPE_P);

        if ((countersBefore[0]!=countersAfter[0])||(cashClear))
        {
            newcash.setCacCas1Disp(0);
            newcash.setCacCas1Rej(0);
            if(countersAfter[5]==2){
                newcash.setCacCas1Rej(1);
            }
            else if(countersAfter[5]!=0){
                if(cash.getCacCas1Rej()!=null){
                    newcash.setCacCas1Rej(cash.getCacCas1Rej());
                }
            }
            newcash.setCacCas1Tot(countersAfter[0]+newcash.getCacCas1Rej());
        }
        else
        {
            newcash.setCacCas1Disp(cash.getCacCas1Disp());
            newcash.setCacCas1Rej(cash.getCacCas1Rej());
            newcash.setCacCas1Tot(cash.getCacCas1Tot());
        }

        newcash.setCacCas1Val(glpValCas1);
        newcash.setCacCas1Etat(""+CASH_COUNTER_ETAT_O);

        if ((countersBefore[1]!=countersAfter[1])||(cashClear))
        {
            newcash.setCacCas2Disp(0);
            newcash.setCacCas2Rej(0);
            if(countersAfter[5]==2){
                newcash.setCacCas2Rej(1);
            }
            else if(countersAfter[5]!=0){
                if(cash.getCacCas2Rej()!=null){
                    newcash.setCacCas2Rej(cash.getCacCas2Rej());
                }
            }            
            newcash.setCacCas2Tot(countersAfter[1]+newcash.getCacCas2Rej());
        }
        else
        {
            newcash.setCacCas2Disp(cash.getCacCas2Disp());
            newcash.setCacCas2Rej(cash.getCacCas2Rej());
            newcash.setCacCas2Tot(cash.getCacCas2Tot());
        }
        newcash.setCacCas2Val(glpValCas2);
        newcash.setCacCas2Etat(""+CASH_COUNTER_ETAT_O);

        if ((countersBefore[2]!=countersAfter[2])||(cashClear))
        {
            newcash.setCacCas3Disp(0);
            newcash.setCacCas3Rej(0);
            newcash.setCacCas3Tot(countersAfter[2]);
        }
        else
        {
            newcash.setCacCas3Disp(cash.getCacCas3Disp());
            newcash.setCacCas3Rej(cash.getCacCas3Rej());
            newcash.setCacCas3Tot(cash.getCacCas3Tot());
        }
        newcash.setCacCas3Val(glpValCas3);
        newcash.setCacCas3Etat(""+CASH_COUNTER_ETAT_O);

        if ((countersBefore[3]!=countersAfter[3])||(cashClear))
        {
            newcash.setCacCas4Disp(0);
            newcash.setCacCas4Rej(0);
            newcash.setCacCas4Tot(countersAfter[3]);
        }
        else
        {
            newcash.setCacCas4Disp(cash.getCacCas4Disp());
            newcash.setCacCas4Rej(cash.getCacCas4Rej());
            newcash.setCacCas4Tot(cash.getCacCas4Tot());
        }
        newcash.setCacCas4Val(glpValCas4);
        newcash.setCacCas4Etat(""+CASH_COUNTER_ETAT_O);

        newcash.setCacRetract(countersAfter[4]);

        if(cashClear){
            newcash.setCacClear(""+CASH_CLEAR_YES);
        } else {
            newcash.setCacClear(""+CASH_CLEAR_NO);
        }
        System.out.println("CashCounterManager.insert2==================>"+newcash);
        
        ejrCashCounterService.save(ctx, newcash);
        
        //log.error("insert cashCounter in methode: countersBeforeAfterSop si cash before est not null!!!!! "+newcash.getCacCas1Tot()+" "+newcash.getCacCas2Tot());
        if (newcash!=null)
        {
            //calculCashAlim(newcash);
            cashAlimBeforeAfter(ctx,countersBefore, countersAfter, newcash.getCacDate());

            updateCass(ctx,newcash);
        }
        return EjrFileProcessor.PROCESS_OK;
    }
    

    private int processRetractCount(ServiceContext ctx,int nombre,Date cocDate)
    {
          System.out.println("processRetractCount nombre="+nombre+" cocDate="+cocDate);
        //insérer l'evenement
         EjrCountClear clear=null;         
         List<EjrCountClear> clears=ejrCountClearService.findByAtmType(ctx,getTopNe(),CLEAR_TYPE_RETRACT);
         if((clears==null)||(clears.isEmpty())){
             clear=new EjrCountClear();
             clear.setCocClearDate(cocDate);
             clear.setCocDate(cocDate);
             clear.setCocNeId(getTopNe());
             clear.setCocNombre(nombre);
             clear.setCocType(CLEAR_TYPE_RETRACT);
             ejrCountClearService.save(ctx,clear);
         }
         else
         {
             clear=clears.get(0);
             clear.setCocNombre(nombre);
             clear.setCocDate(cocDate);
             
             ejrCountClearService.save(ctx,clear);
         }

         if ((clear!=null) && (clear.getCocType()==CLEAR_TYPE_RETRACT))
            this.updateRetract(ctx,clear.getCocDate());

         return EjrFileProcessor.PROCESS_OK;
    }
    

    public void updateRetract(ServiceContext ctx,Date evDate)
    {
        String where="";
        int toutes = 0;
        int dernierClear=0;
        int attente=0;

        // 1- Tous les retracts        
        List<EjrTransaction> tras=ejrTransactionService.findByAtmRetracted(ctx, getTopNe(), EjrTransactionCsts.TRA_RETRACT_YES);
        if(tras!=null)
        	toutes=tras.size();

        // Last cleared
        EjrCountClear lastCleared = null;      
        List<EjrCountClear> clears =ejrCountClearService.findByAtmType(ctx, getTopNe(), CLEAR_TYPE_RETRACT);
        if ((clears!=null)&& (!clears.isEmpty()))
            lastCleared=clears.get(0);

        // Toutes
        if (lastCleared!=null)
        {
            toutes=Math.max(toutes, lastCleared.getCocNombre());
        }
        // 2- Depuis le dernier cleared
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        // 2-2 Retracts depuis
        if (lastCleared!=null)
        {
            if (lastCleared.getCocClearDate()!=null)
            {               
                tras=ejrTransactionService.findByAtmRetractedDate(ctx, getTopNe(), EjrTransactionCsts.TRA_RETRACT_YES,lastCleared.getCocClearDate());
                if(tras!=null)
                	dernierClear=tras.size();
            }
            else
            {
                dernierClear=lastCleared.getCocNombre();               
                tras=ejrTransactionService.findByAtmRetractedDate(ctx, getTopNe(), EjrTransactionCsts.TRA_RETRACT_YES,lastCleared.getCocDate());
                if(tras!=null)
                	dernierClear +=tras.size();
            }
        }
        else
        {
            dernierClear=toutes;
        }

        // En attente
        attente=0;
        if (lastCleared!=null)
        {
            attente+=lastCleared.getCocNombre();
            tras=ejrTransactionService.findByAtmRetractedDate(ctx, getTopNe(), EjrTransactionCsts.TRA_RETRACT_YES,lastCleared.getCocDate());
            if(tras!=null)
            	attente +=tras.size();
        }
        else
        {
            attente=dernierClear;
        }

        // Retrouver le retract
        EjrRetract ret = ejrRetractService.getLastRetract(ctx,getTopNe());
        if (ret==null)
        {
            ret = new EjrRetract();
            ret.setRetNeId(getTopNe());
            ret.setRetNbrTraAuj(attente);
            ret.setRetNbrTraLast(dernierClear);
            ret.setRetNbrTraTotal(toutes);
            ret.setRetDate(evDate);
            
            ejrRetractService.save(ctx,ret);
        }
        else if ((ret.getRetNbrTraAuj()!=attente)||(ret.getRetNbrTraLast()!=dernierClear)||(ret.getRetNbrTraTotal()!=toutes))
        {
            ret.setRetNbrTraAuj(attente);
            ret.setRetNbrTraLast(dernierClear);
            ret.setRetNbrTraTotal(toutes);
            ret.setRetDate(evDate);
            
            ejrRetractService.save(ctx,ret);
        }
    }

    
    

    private EjrAlimentation cashAlimBeforeAfter(ServiceContext ctx,int[] countersBefore,int[] countersAfter,Date cacDate)
    {
        System.out.println("cashAlimBeforeAfter==================>"+cacDate);
        EjrAlimentation alim=null;

        if (
                (countersBefore[0]==countersAfter[0])
            &&  (countersBefore[1]==countersAfter[1])
            &&  (countersBefore[2]==countersAfter[2])
            &&  (countersBefore[3]==countersAfter[3])
            &&  (countersBefore[5]==countersAfter[5])
            )
        {
           return alim;
        }

        if((countersBefore[0]==0)&&(countersBefore[1]==0)&&(countersBefore[2]==0)&&(countersBefore[3]==0)&&(countersBefore[4]==0)&&(countersBefore[5]==0)){
            EjrCashCounter lastcash=ejrCashCounterService.getCashBeforeDate(ctx,getTopNe(), cacDate);
            while(lastcash!=null){
                if(lastcash.getCacType()==""+CASH_COUNTER_TYPE_S){
                    break;
                }
                else if(lastcash.getCacType()==""+CASH_COUNTER_TYPE_P){
                    if(lastcash.getCacClear().compareTo(""+CASH_CLEAR_YES)==0){
                        countersBefore[0]=lastcash.getCacCas1Tot();
                        countersBefore[1]=lastcash.getCacCas2Tot();
                        countersBefore[2]=lastcash.getCacCas3Tot();
                        countersBefore[3]=lastcash.getCacCas4Tot();
                    }
                    break;
                }
                lastcash=ejrCashCounterService.getCashBeforeDate(ctx,getTopNe(), lastcash.getCacDate());

            }
        }

        int totoalBefore = countersBefore[0]+countersBefore[1]+countersBefore[2]+countersBefore[3]+countersBefore[5];
        int totalAfter = countersAfter[0]+countersAfter[1]+countersAfter[2]+countersAfter[3]+countersAfter[5];

        if(countersBefore[5]!=countersAfter[5])
        {
           if(totoalBefore==totalAfter)
           {
              return alim;
           }
        }

       double totalVal=0.0;
       alim=new EjrAlimentation();
       alim.setAliNeId(getTopNe());       
       //alim.setAliTraite(AlimentationManager.ALIM_TRAITE_INST);
       alim.setAliDate(cacDate);

       int delta1=countersAfter[0]-countersBefore[0];
       int delta2=countersAfter[1]-countersBefore[1];
       int delta3=countersAfter[2]-countersBefore[2];
       int delta4=countersAfter[3]-countersBefore[3];

       if(countersBefore[5]==2)
       {
           delta1-=1;
           delta2-=1;
       }
       else{
           EjrCashCounter lastCash = ejrCashCounterService.getCashBeforeDate(ctx,getTopNe(), cacDate);
           EjrCashCounter firstLastCash=lastCash;
           int lastRemaining=0;
           while(lastCash!=null){
               lastRemaining=lastCash.getCacCas1Tot()-lastCash.getCacCas1Disp()
                       +lastCash.getCacCas2Tot()-lastCash.getCacCas2Disp()
                       +lastCash.getCacCas3Tot()-lastCash.getCacCas3Disp()
                       +lastCash.getCacCas4Tot()-lastCash.getCacCas4Disp();
               if(lastRemaining!=totalAfter)
                   break;
               int cashRej =lastCash.getCacCas1Rej()+lastCash.getCacCas2Rej()+lastCash.getCacCas3Rej()+lastCash.getCacCas4Rej();
               if(cashRej==countersBefore[5])
                   firstLastCash=lastCash;
               
               lastRemaining=0;
               lastCash = ejrCashCounterService.getCashBeforeDate(ctx,getTopNe(), lastCash.getCacDate());               
           }
           if(lastCash==null)
               lastCash=firstLastCash;
           
           if(lastCash!=null){
               delta1-=lastCash.getCacCas1Rej();
               delta2-=lastCash.getCacCas2Rej();
               delta3-=lastCash.getCacCas3Rej();
               delta4-=lastCash.getCacCas4Rej();

               //---------------------------//
               if(totoalBefore==lastRemaining)
               {
                   delta1=countersAfter[0]-(lastCash.getCacCas1Tot()-lastCash.getCacCas1Disp());
                   delta2=countersAfter[1]-(lastCash.getCacCas2Tot()-lastCash.getCacCas2Disp());
                   delta3=countersAfter[2]-(lastCash.getCacCas3Tot()-lastCash.getCacCas3Disp());
                   delta4=countersAfter[3]-(lastCash.getCacCas4Tot()-lastCash.getCacCas4Disp());
               }
               //---------------------------//
           }
       }
       if(countersAfter[5]==2)
       {
           delta1+=1;
           delta2+=1;
        }

       alim.setAliCas1Nb(delta1);
       alim.setAliCas2Nb(delta2);
       alim.setAliCas3Nb(delta3);
       alim.setAliCas4Nb(delta4);

       totalVal=(float)(delta1*glpValCas1
                        +delta2*glpValCas2
                        +delta3*glpValCas3
                        +delta4*glpValCas4);
       alim.setAliAmount(new BigDecimal(totalVal));

       if (!alim.getAliAmount().equals(BigDecimal.ZERO))
       {
            ejrAlimentationService.save(ctx, alim);
            return alim;
       }
       return null;

    }
	
	private int processCashPresented(String line, EjrTransaction tra, Date startDate){

    	System.out.println("processCashPresented "+line);
    	//log.error("Notes Presented: "+tra.getTraMontant());
        //log.error("line :"+line);
        //13:36:05 NOTES PRESENTED 1,0,0,0
        if(!line.contains("NOTES PRESENTED"))
        {
            logger.error("Cash presented line do not contain 'NOTES PRESENTED' at line :"+(this.getLastLine()-1));

            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }
        int[] nbrCas=new int[4];

        
        String[] ligne = line.split("*");

        Date date = null;
        String strDate ="";
        SimpleDateFormat dateTimesFormat=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        SimpleDateFormat dateFormat=new SimpleDateFormat("dd/MM/yyyy");

        if (startDate!=null)
        {
             strDate = dateFormat.format(startDate) + " " + ligne[1];
        }
        else if((tra!=null)&& (tra.getTraTraDate()!=null))
        {
            strDate = dateFormat.format(tra.getTraTraDate()) + " " + ligne[1];
        }
        if (strDate.length()>0)
        {
            try {
                date = dateTimesFormat.parse(strDate);
            } catch (ParseException ex) {
                logger.error("Imparsable date :"+strDate+" exception :"+ex.getMessage());
                logger.error("Processed line :"+line);
                ex.printStackTrace();
            }
        }
        // Tenter autre chose
        if (date == null)
            date=getDateForLine(ligne[1]);

        lastEventDate=date;
        
        ligne[2]=ligne[2].replace("NOTES PRESENTED:", "");
        String[] unBi=ligne[2].split(",");

        nbrCas[0]=Integer.parseInt(unBi[0]);
        nbrCas[1]=Integer.parseInt(unBi[1]);
        nbrCas[2]=Integer.parseInt(unBi[2]);
        nbrCas[3]=Integer.parseInt(unBi[3]);

        tra.setTraNote1(nbrCas[0]);
        tra.setTraNote2(nbrCas[1]);
        tra.setTraNote3(nbrCas[2]);
        tra.setTraNote4(nbrCas[3]);

         return EjrFileProcessor.PROCESS_OK;
      }

    private int updateCashPresented(ServiceContext ctx,String line, Date startDate){

    	System.out.println("updateCashPresented "+line);
    	//09:41:23 CASH 1:1,11;2:2,2;
        int firstLine=this.getLastLine();
        logger.info("updateCashPresented "+line);

        if(!line.contains("CASH "))
        {
            logger.error("processCashLine line does not contain 'CASH ' !!!");
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }
        int[] nbrCas=new int[4];
        nbrCas[0]=0;
        nbrCas[1]=0;
        nbrCas[2]=0;
        nbrCas[3]=0;

        logger.info("updateCashPresented etape 1");
        
        String[] ligne = line.split("[\\s]");
        if((ligne==null)||(ligne.length!=3))
        {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }

        Date date=getDateForLine(ligne[0]);
        if (date == null)
        {
            if (lastEventDate==null)
                return EjrFileProcessor.PROCESS_NOK_INCORRECT_DATE_FORMAT;
            else
                date = new Date(lastEventDate.getTime()+1000);
        }
        lastEventDate=date;

        logger.info("updateCashPresented etape 2");
        
        String[] unBi=ligne[2].split(";");
        if((unBi==null)||(unBi.length<1))
        {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }

        for(int i=0;i<unBi.length;i++){
            String[] s=unBi[i].split(",");
            if((s==null)||(s.length<2))
            {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }
            if(s[0].contains("1:"))
                nbrCas[0]=Integer.parseInt(s[1]);
            else if(s[0].contains("2:"))
                nbrCas[1]=Integer.parseInt(s[1]);
            else if(s[0].contains("3:"))
                nbrCas[2]=Integer.parseInt(s[1]);
            else if(s[0].contains("4:"))
                nbrCas[3]=Integer.parseInt(s[1]);
            else
            {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }
        }
        
        logger.info("updateCashPresented etape 3");
        
        List<EjrCassette> listCass= ejrCassetteService.findByAtm(ctx,getTopNe());
        if((listCass==null)||(listCass.isEmpty()))
                return EjrFileProcessor.PROCESS_OK;

        // Si la date est anterieure, alors ignorer
        Iterator it=listCass.iterator();
        while(it.hasNext()){
            EjrCassette cas=(EjrCassette)it.next();
            if(!date.after(cas.getCasDate()))
              return EjrFileProcessor.PROCESS_OK;
        }

        int newTotal = 0;
        int oldTotal = 0;        

        it=listCass.iterator();
        while(it.hasNext())
        {
        	EjrCassette cas=(EjrCassette)it.next();
            if (cas.getCasNotes()!=null)
                oldTotal+=cas.getCasNotes();

            if(nbrCas[cas.getCasOrder()-1]!=0)
            {
                int notes = cas.getCasNotes()-nbrCas[cas.getCasOrder()-1];
                if((notes)<0)
                {
                    logger.error("valeur cassette incorrecte:"+(cas.getCasNotes()-nbrCas[cas.getCasOrder()-1])+" for cassette:"+cas.getCasOrder()+"date:"+date);
                    notes = 0;
                }
                cas.setCasNotes(notes);
                cas.setCasDate(date);
                
                int stat=SEUIL_ZERO;
                
                if(notes<=SEUIL_CAS_ERR)
              	  stat=SEUIL_ERROR;
                else if(notes>SEUIL_CAS_ERR && notes <= SEUIL_CAS_WAR)
              	  stat=SEUIL_WARN;
                
                cas.setCasStatus(stat);
                
                
               
                  if(newTotal==0) {
                	  getTopNe().setNeCashOut("4");
                	  getTopNe().setNeNesId(topNeStateService.findById(ctx,4L,""));
                  }
                  else if(newTotal<=SEUIL_CAS_ERR*4) {
                	  getTopNe().setNeCashOut("3");
                	  getTopNe().setNeNesId(topNeStateService.findById(ctx,3L,""));
                  }
                  else if(newTotal>SEUIL_CAS_ERR*4 && newTotal <= SEUIL_CAS_WAR*4) { 
                	  getTopNe().setNeCashOut("2");
                	  getTopNe().setNeNesId(topNeStateService.findById(ctx,2L,""));
                  }
                  else {
                	  getTopNe().setNeCashOut("1");
                	  getTopNe().setNeNesId(topNeStateService.findById(ctx,1L,""));
                  }
                
                ejrCassetteService.save(ctx,cas);
                
               
            }
            if (cas.getCasNotes()!=null)
                newTotal+=cas.getCasNotes();
        }
        
        logger.info("updateCashPresented etape 4");

        this.updateCasSeuil(ctx,oldTotal, newTotal);



        return EjrFileProcessor.PROCESS_OK;
    	
      }

    private void estimateNotesPresented(ServiceContext ctx,EjrTransaction tra,Date startDate){
        //log.error("debut estimateNotesPresented" );

        if((tra==null)||(tra.getTraType()!=EjrTransactionCsts.TRA_TYPE_RETRAIT)||(tra.getTraAmount().compareTo(new BigDecimal("0"))<0))
            return;

        String cashLine="13:36:05 NOTES PRESENTED 1,0,0,0";
        SimpleDateFormat df= new SimpleDateFormat("HH:mm:ss");
        if(startDate!=null)
            cashLine=df.format(startDate);
        else if(tra.getTraInsDate()!=null)
            cashLine=df.format(tra.getTraInsDate());
        else if(this.lastEventDate!=null)
            cashLine=df.format(this.lastEventDate);
        else
            return;

        cashLine+=" NOTES PRESENTED ";

        if(tra.getTraAmount().intValue()==100){
            cashLine+="1,0,0,0";
            //log.error("cashLine: "+cashLine);
            this.updateCashPresented(ctx,cashLine, startDate);
            processCashPresented(cashLine,tra,startDate);
            return;
        }

        int cas1=tra.getTraAmount().intValue()/100;
        int cas2=0;

        // Delta actuel des cassettes
        /*ArrayList<BrsCassette> listCass= CassetteManager.listCassGab(dbGab.getGabId());
        if((listCass==null)||(listCass.isEmpty()))
                return;*/

       
        int curCas1=0;
        int curCas2=0;

        /*Iterator it=listCass.iterator();
        while(it.hasNext())
        {
            BrsCassette cas=(BrsCassette)it.next();
            if(cas.getCasOrder()==1)
                curCas1=cas.getCasNotes();
            else if(cas.getCasOrder()==2)
                curCas2=cas.getCasNotes();
        }*/
         int deltaCas=curCas1-curCas2;

        // Nombre des combinaison possibles
        int nbrComb=cas1/2+1;
        int[] combinaisons = new int[nbrComb];
        int index=0;

        combinaisons[index]=cas1;
        index+=1;
        while(index<nbrComb){
            combinaisons[index]=combinaisons[index]-3;
            index+=1;
        }

        int max=0;
        for(int i=0;i<nbrComb;i++){
            if(Math.abs(combinaisons[i]-deltaCas)>max)
                max=Math.abs(combinaisons[i]-deltaCas);
        }

        boolean trouve=false;
        int minIndex=1000;
        int occur=0;
        while((!trouve)&&(occur<nbrComb)){
            int min=1000;
            minIndex=1000;
            for(int i=0;i<nbrComb;i++){
                if(Math.abs(combinaisons[i]-deltaCas)<min)
                    min=Math.abs(combinaisons[i]-deltaCas);
                    minIndex=i;
            }
            if(minIndex<nbrComb){
                if((minIndex<curCas2)&&((cas1-2*minIndex)<curCas1))
                {
                    trouve=true;
                    break;
                }
                else{
                    combinaisons[minIndex]=max;
                }
            }
            occur+=1;
        }


        if((!trouve)||(index>nbrComb))
           return;
        
        cashLine+=Integer.toString(cas1-2*minIndex)+","+Integer.toString(minIndex)+",0,0";
        //log.error("cashLine: "+cashLine);

        this.updateCashPresented(ctx,cashLine, startDate);
        processCashPresented(cashLine,tra,startDate);
        return;
    }

    
	
	private Date getDateForLine(String heures)
    {
    	System.out.println("getDateForLine "+heures);
    	DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
        String fileDate= getDateFromFileName(getCurrentFile());
        if((fileDate==null)||(fileDate.length()<1))
        {
            return null;
        }
        String dateString = fileDate+" "+heures;
        Date evDate=null;

        try {
            evDate = dateFormat.parse(dateString);
            evDate=new Date(evDate.getTime()-86400000);
        } catch (ParseException ex) {
            logger.error("Incorrect date format :"+dateString+" in file :"+this.getCurrentFile()+" at line No :"+this.lastLine);
            ex.printStackTrace();
            return null;
        }

        return evDate;
    }

    private Date getDateFromLine(String line,boolean year4Digit)
    {
    	System.out.println("getDateFromLine "+line);
    	// La date
        if((line==null)&&(line.length()<1))
                 return null;

        // La date        
        Date evDate=null;

        if(!line.contains("LAST CLEARED")){
            String strDate="";
            String ligne=line.replace("*", " ");
            String[] lignes=ligne.trim().split("[\\s]+");
            String fileDateS2 = getDateFromFileName(getCurrentFile());
            SimpleDateFormat dateTimesFormat=new SimpleDateFormat("yyyyMMdd HH:mm:ss");
            System.out.println("lignes[0]="+lignes[0]+" lignes[1]="+lignes[1]+" lignes[2]="+lignes[2]);
            try {
                if(lignes[0].contains(":"))
                    evDate = dateTimesFormat.parse(fileDateS2+" "+lignes[0]);
                else if(lignes[1].contains(":"))
                    evDate = dateTimesFormat.parse(fileDateS2+" "+lignes[1]);
                else if(lignes[2].contains(":"))
                    evDate = dateTimesFormat.parse(lignes[2]);

            } catch (ParseException ex) {
                logger.error("Error in date"+strDate+" ex:"+ex.getMessage());
                ex.printStackTrace();
            }
        }else{
            String lign=line.replace("LAST CLEARED: ", "").trim();
            try {
                SimpleDateFormat dateTimesFormat=new SimpleDateFormat("yy/MM/dd HH:mm");
                if(lign.contains(":"))
                    evDate = dateTimesFormat.parse(lign);

            } catch (ParseException ex) {
                logger.error("Error in date : "+lign+" ex:"+ex.getMessage());
                ex.printStackTrace();
            }
        }
        
    
        return evDate;
    }
    

  
     protected String getDateFromFileName(String fileName){
        String fileDate="";
        if (fileName.compareTo("EJDATA.LOG")==0)
        {
            Date now = Calendar.getInstance(TimeZone.getTimeZone("Africa/Casablanca"),new Locale("fr","MA")).getTime();
            Date tomorrow = new Date(now.getTime()+86400000);
            SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
            fileDate=format.format(tomorrow);
        }
        else
        {
            //if(fileName.length()==17)
            if(fileName.length()==12)
            {
                fileDate = fileName.replace(".jrn","");//.substring(3,7)+fileName.substring(8,10)+fileName.substring(11,13);
                int value = 0;
                try{
                    value = Integer.parseInt(fileDate);
                } catch(Exception e)
                {
                    value=-1;
                }
                if(value<=0)
                    fileDate="";
            }
        }
        return fileDate;
    }

    
    protected String getFileNameForDate(Date fDate)
    {
        String fName="";

        if(fDate==null)
            return fName;

        Date fileDate = new Date(fDate.getTime()+86400000);
        
        //EJ_2010_09_03.txt        
        SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
        //fName="EJ_"+format.format(fileDate)+".txt";
        fName=""+format.format(fileDate)+".jrn";
                
        return fName;
    }


    private int processCommLine(ServiceContext ctx,String line)
    {
        // La date
        System.out.println("processCommLine line="+line);
        String heures="";
        String[] date = line.split("[\\*]");
        if(date.length<=1){
            System.out.println("processCommLine lastProcessedLine="+lastProcessedLine);
            date = lastProcessedLine.split("[\\*]");
            heures=date[2];            
        }
        else
            heures=date[1];
        
        Date evDate = getDateForLine(heures);
        if (evDate == null)
        {
            if (lastEventDate==null)
                return EjrFileProcessor.PROCESS_NOK_INCORRECT_DATE_FORMAT;
            else
                evDate = new Date(lastEventDate.getTime()+1000);
        }

        lastEventDate=evDate;

        // Type evennement
        int type = EjrFileProcessor.ETAT_INCONNU;
        
        if (line.contains("SST OFF-LINE"))
        	type = EjrFileProcessor.ETAT_DOWN;
        else if (line.contains("SST ON-LINE"))
        	type = EjrFileProcessor.ETAT_UP;

        if (type == EjrFileProcessor.ETAT_INCONNU)
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;

        // Save event
        EjrServerCnx event = new EjrServerCnx();
        event.setSecDate(evDate);
        event.setSecStatus(""+type);
        event.setSecNeId(getTopNe());
        
        getTopNe().setNeComm("0");
        if(type==EjrFileProcessor.ETAT_DOWN) {
        	getTopNe().setNeComm("4");
        	getTopNe().setNeNesId(topNeStateService.findById(ctx,9L,""));
        }
        getTopNe().setNeCommDate(evDate);
                
        ejrServerCnxService.save(ctx, event);

        // Return OK
        return EjrFileProcessor.PROCESS_OK;

    }
    

    private int processDevice(ServiceContext ctx,String line) {

        System.out.println("================================================================ ");
        System.out.println("================================================================ ");
        System.out.println("================================================================ ");
        System.out.println("================================================================ ");
        System.out.println("processDevice "+line+" lineBefore="+lineBefore);
        int firstLine = this.getLastLine();
        
        if(!line.contains("ERROR"))
        {
            logger.error("processDevice do not contain key word at line :"+firstLine);
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }

        // Calculate Event Date        
        Date coeDate=getDateFromLineSafe(lineBefore,true);        
        System.out.println("processDevice coeDate="+coeDate);
        
        String[] lines=line.split("[\\s]+");
        String devName=lines[0]+" "+lines[1];
        int status=4;
        int supply=4;
        
        EjrDevice dev=new EjrDevice();
        dev.setDevDate(coeDate);
        dev.setDevName(devName);
        dev.setDevNeId(getTopNe());
        dev.setDevStatus(""+status);
        dev.setDevSupply(""+supply);
        
        if(status==0)
        	status=1;
        
        
        System.out.println("DeviceManager.insert==================>"+dev);
        
        String code1="",code2="";
        
        
        if(devName.equals("RECEIPT PRINTER")){
            code1="6434";
            code2="000B";
            devName="Imprimante du reçu";
            getTopNe().setNeReceiptPrinter(""+status);
            getTopNe().setNeReceiptPrinterDate(coeDate);
        }else if(devName.equals("JOURNAL PRINTER")){
            code1="6434";
            code2="000A";
            devName="Imprimante du journal";
            getTopNe().setNeJournalPrinter(""+status);
            getTopNe().setNeJournalPrinterDate(coeDate);
        }
        else if(devName.equals("CASH DISPENSE")){
            code1="643A";
            code2="0009";
            devName="Distributeur de billets";
            getTopNe().setNeCashHandler(""+status);
            getTopNe().setNeCashHandlerDate(coeDate);
        }
        else if(devName.equals("CARD READER")){
            code1="6434";
            code2="000D";
            devName="Lecteur de carte";
            getTopNe().setNeCardReader(""+status);
            getTopNe().setNeCardReaderDate(coeDate);
        }                
        else{
            
        }
        dev.setDevName(devName);        
        ejrDeviceService.save(ctx,dev);
        
        
        System.out.println("DeviceManager.insert==================>"+dev);
        

        return EjrFileProcessor.PROCESS_OK;
     }
    
    private int processSafeDoor(ServiceContext ctx,String line) {

        System.out.println("================================================================ ");
        System.out.println("================================================================ ");
        System.out.println("================================================================ ");
        System.out.println("================================================================ ");
    	System.out.println("processSafeDoor "+line);
        int firstLine = this.getLastLine();
        
        /*if((!line.contains("CASSETTE REMOVED"))
            && (!line.contains("REJECT BIN REMOVED"))
            && (!line.contains("REJECT BIN INSERTED"))
            && (!line.contains("CASSETTE INSERTED")))*/
        if(!line.contains("SAFE DOOR OPENED") && !line.contains("SAFE DOOR CLOSED"))
        {
            logger.error("processSafeDoor do not contain key word at line :"+firstLine);
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }

        // Calculate Event Date
        String fileDateS2 = this.getDateFromFileName(this.getCurrentFile());
        Date coeDate=getDateFromLine(line,true);
        System.out.println("processSafeDoor fileDateS2="+fileDateS2);
        System.out.println("processSafeDoor coeDate="+coeDate);
        
        /*
        //Date coeDate=null;
        if((lineBefore!=null)&&(lineBefore.length()>1))
            coeDate=getDateFromLine(lineBefore,true);

        if((coeDate==null)&&(lastEventDate!=null))
        {
             coeDate=new Date(lastEventDate.getTime()+1000);
        }

        SimpleDateFormat formatJour = new SimpleDateFormat("yyyyMMdd");
        if(coeDate==null)
        {
            String fileDateS = this.getDateFromFileName(this.getCurrentFile());
            if((fileDateS!=null)&&(fileDateS.length()>0))
            {
                try {
                    coeDate = formatJour.parse(fileDateS);
                    coeDate= new Date(coeDate.getTime()-86400000);
                } catch (ParseException ex) {
                    log.error("Exception while parsing date :"+fileDateS);
                    ex.printStackTrace();
                }
            }
        }

        if(coeDate==null)
        {
            log.error("processSafeDoor Unable to calculate coeDate :"+firstLine);
            return LogAnalyser.LOG_ANALYSER_SYSTEM_ERROR;
        }*/
       // this.lastEventDate= coeDate;


        // Event type
        int evtType=EjrFileProcessor.EVENT_INCONNU;
        if(line.contains("SAFE DOOR OPENED"))
            evtType=EjrFileProcessor.EVENT_OUVERT;
        else if(line.contains("SAFE DOOR CLOSED"))
            evtType=EjrFileProcessor.EVENT_FERME;

        if(evtType==EjrFileProcessor.EVENT_INCONNU)
        {
            logger.error("processSafeDoor Unable to define event type :"+firstLine);
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }

        // Recuperer le dernier evennement
        /*BrsCoffreEvent lastEvent = CoffreManager.getLastEvent(this.dbGab.getGabId());
        if(lastEvent!=null)
        {
            Date lastCoeDate = lastEvent.getCoeDate();
            String coeJour=formatJour.format(coeDate);
            String lastCoeJour =formatJour.format(lastCoeDate);
            if(lastCoeJour.compareTo(coeJour)==0)
            {            
                // Verifier si il n y a pas de transactions
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String where = " where traGabId="+this.dbGab.getGabId()+ " and traInsDate>'"+dateFormat.format(lastCoeDate)+"'";
                ArrayList<BrsTransaction> trans= TransactionManager.filterTransactions(where, "", 0, 1);
                if((trans==null)||(trans.isEmpty()))
                    return LogAnalyser.LOG_ANALYSER_REFRESH_OK;
            }
        }*/

        // Inserer l'evennement
        EjrCoffreEvent event=new EjrCoffreEvent();
        event.setCoeDate(coeDate);
        event.setCoeType(""+evtType);
        event.setCoeNotif(""+EjrFileProcessor.NOTIF_NOT_NEEDED);
        event.setCoeNbrCasRem(""+0);
        event.setCoeNeId(getTopNe());
        
        
        
        
        if (isCoeNotifNedded(event))
            event.setCoeNotif(""+EjrFileProcessor.NOTIF_NEEDED);
        
         /*-------------- Debut Bug 662 ------------------*/
        /*if(lastEvent!=null)
        {
            if(!event.getCoeDate().after(lastEvent.getCoeDate()))
            {
                event.setCoeDate(new Date(lastEvent.getCoeDate().getTime()+1000));
            }
        } */      
        /*--------------  Fin  Bug 662 ------------------*/
        ejrCoffreEventService.save(ctx,event);        
        System.out.println("CoffreManager.insert==================>"+event);
        this.lastEventDate= coeDate;

        return EjrFileProcessor.PROCESS_OK;
     }
    

    private int processErrorLine(ServiceContext ctx,String line)
    {        
        //*054*09:21:33 JRN/REC ERROR: 00006434 00000000 0000000A
        if(!line.contains("ERROR:"))
        {
            logger.error("processErrorLine line does not contain 'ERROR:' !!!");
            return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
        }

        String[] chaines = line.split("[\\s]+");

        if ((chaines==null) || (chaines.length!=6))
        {
            logger.error("processErrorLine line not well formatted:"+chaines.length);
            System.out.println("processErrorLine line not well formatted:"+chaines.length);
            return EjrFileProcessor.PROCESS_OK;
        }

        // Date debut
        Date date;
        if (chaines[0].contains("*"))
        {
            String[] dates = chaines[0].split("\\*");
            date=getDateForLine(dates[2]);
        }
        else
            date=getDateForLine(chaines[0]);
        
        if (date == null)
        {
            if (lastEventDate==null){
                System.out.println("lastEventDate="+lastEventDate);
                return EjrFileProcessor.PROCESS_NOK_INCORRECT_DATE_FORMAT;
            }else
                date = new Date(lastEventDate.getTime()+1000);
        }
        lastEventDate=date;

        String code1=chaines[3].substring(4, 8);
        String code2=chaines[4].substring(4, 8);
        String code3=chaines[5].substring(4, 8);
        if(code2.endsWith("0000") && !code3.endsWith("0000"))
            code2=code3;
        // Retrouver le win id
        EjrWinErrMap erreure = getErrorFromMap(ctx,code1,code2);
        if (erreure==null)
        {
             logger.error("Code erreur ingerable : ("+code1+","+code2+")");
             System.out.println("Code erreur ingerable : ("+code1+","+code2+")");
            return EjrFileProcessor.PROCESS_OK;
        }

        // Si l'erreur n'est pas active, la rajouter        
        List<EjrWincorError> wieList = ejrWincorErrorService.findByAtmErrActif(ctx, getTopNe(), erreure, ""+EjrFileProcessor.ACTIF);
        if ((wieList!=null)&&(!wieList.isEmpty()))
        {
            return EjrFileProcessor.PROCESS_OK;
        }

        // Inserer l'erreur
        EjrWincorError error = new EjrWincorError();
        error.setWieNeId(getTopNe());
        error.setWieDebut(date);
        error.setWieActif(""+EjrFileProcessor.ACTIF);
        error.setWieWemId(erreure);
        
        MonIssue issue=new MonIssue();
        issue.setIssNeId(getTopNe());
        issue.setIssCode(erreure.getWenCode1()+" "+erreure.getWenCode2());
        issue.setIssSevId(monSeverityService.findByCode(ctx, ""+erreure.getWenSeverity()));
        issue.setIssStartDate(date);
        issue.setIssDesc(erreure.getWenInfo());
        
        
        monIssueService.save(ctx, issue);
        
        logger.info("processErrorLine => "+issue);
        
        ejrWincorErrorService.save(ctx,error);

        return EjrFileProcessor.PROCESS_OK;
    }

    private EjrWinErrMap getErrorFromMap(ServiceContext ctx,String code1,String code2)
    {
        // chercher avec les deux codes et type error        
        List<EjrWinErrMap> wenList =ejrWinErrMapService.findByCode1Code2Type(ctx, code1, code2, EjrFileProcessor.TYPE_ERREUR_ERROR); 
        		
        if ((wenList!=null)&&(!wenList.isEmpty())&&(wenList.size()==1))
        {
            return wenList.get(0);
        }

        // chercher avec les deux codes et type warning        
        wenList = ejrWinErrMapService.findByCode1Code2Type(ctx, code1, code2, EjrFileProcessor.TYPE_ERREUR_WARNING);
        if ((wenList!=null)&&(!wenList.isEmpty())&&(wenList.size()==1))
        {
            return wenList.get(0);
        }

        // Chercher le default error ou DEFWAR
        if ((code2.compareTo("DEFAULT")!=0) && (code2.compareTo("DEFWAR")!=0))
        {
            if (code2.compareTo("DEFWAR")!=0)
            {                
                wenList = ejrWinErrMapService.findByCode1Code2Type(ctx, code1, "DEFAULT", EjrFileProcessor.TYPE_ERREUR_ERROR);
                if ((wenList!=null)&&(!wenList.isEmpty())&&(wenList.size()==1))
                {
                    return wenList.get(0);
                }
            }
            
            wenList = ejrWinErrMapService.findByCode1Code2Type(ctx, code1, "DEFWAR", EjrFileProcessor.TYPE_ERREUR_WARNING);
            if ((wenList!=null)&&(!wenList.isEmpty())&&(wenList.size()==1))
            {
                return wenList.get(0);
            }
        }
        
        logger.warn("Code erreur introuve : ("+code1+","+code2+")");

        // Chercher avec le code 1
        
        wenList = ejrWinErrMapService.findByCode1(ctx, code1);
        if ((wenList==null)||(wenList.isEmpty())||(wenList.size()!=1))
        {
            logger.error("Code1 erreur introuve : "+code1);
            return null;
        }

        EjrWinErrMap oldError = wenList.get(0);
       	EjrWinErrMap newError = new EjrWinErrMap();
        
        newError.setWenCode1(code1);
        newError.setWenCode2(code2);
        newError.setWenTypeErr(EjrFileProcessor.TYPE_ERREUR_ERROR); //Error
        newError.setWenTdStatus(oldError.getWenTdStatus());
        newError.setWenSeverity(oldError.getWenSeverity());
        newError.setWenMStatus(oldError.getWenMStatus());
        newError.setWenMData("Gab :"+getTopNe().getNeCode());
        newError.setMenReboot(oldError.getMenReboot());
        newError.setWenSysmsgNbr(this.lastLine+1);
        newError.setWenDdcStatus("File:"+this.getCurrentFile());
        newError.setWenDdcMdsSta("Inserted by easyatm");
        newError.setWenInfo(oldError.getWenModule()+" ERROR : "+code1+" "+code2);
        newError.setWenModule(oldError.getWenModule());
        
        ejrWinErrMapService.save(ctx,newError);
        logger.info("Nouveau code erreur inserre :("+code1+","+code2+")");

        // rechercher avec les deux codes        
        wenList = ejrWinErrMapService.findByCode1Code2Type(ctx, code1, code2, EjrFileProcessor.TYPE_ERREUR_ERROR);
        if ((wenList!=null)&&(!wenList.isEmpty())&&(wenList.size()==1))
        {
            return wenList.get(0);
        }
        logger.error("Nouveau code erreur non inserre :("+code1+","+code2+")");
        return null;
    }

    
    
	
	/*------------------------------------------------------------------------------*/
	/*------------------------------------------------------------------------------*/
	/*------------------------------------------------------------------------------*/
	private String getDateFormat(Date fileDate, String inDate) {
		String format1 = "dd/MM/yyyy HH:mm";
		String format2 = "MM/dd/yyyy HH:mm";

		SimpleDateFormat f1 = new SimpleDateFormat(format1);
		SimpleDateFormat f2 = new SimpleDateFormat(format2);
		SimpleDateFormat f3 = EjCamAnalyzerSigma.fileDateFormat;

		if (inDate.length() < 16)
			return format1;

		int mois = Integer.parseInt(inDate.substring(3, 5));
		if (mois > 12) {
			return format2;
		}

		if (this.lastEventDate != null) {
			try {
				long delta1 = f1.parse(inDate).getTime()
						- lastEventDate.getTime();
				long delta2 = f2.parse(inDate).getTime()
						- lastEventDate.getTime();
				if (Math.abs(delta2) < Math.abs(delta1))
					return format2;
				else
					return format1;

			} catch (ParseException ex) {
				logger.debug("Exception raised during parse date !!!", ex);
			}
		}

		try {
			String dateFromFileName = EjCamAnalyzerSigma.fileDateFormat
					.format(fileDate);
			long delta1 = f1.parse(inDate).getTime()
					- (f3.parse(dateFromFileName).getTime() - 86400000);
			long delta2 = f2.parse(inDate).getTime()
					- (f3.parse(dateFromFileName).getTime() - 86400000);
			if (Math.abs(delta2) < Math.abs(delta1))
				return format2;
			else
				return format1;
		} catch (Exception ex) {
			logger.debug("Exception raised during parse date !!!", ex);
		}
		return format1;
	}

	/*------------------------------------------------------------------------------*/
	/*------------------------------------------------------------------------------*/
	/*------------------------------------------------------------------------------*/
	private Date getDateFromLine(Date fileDate, String line, boolean year4Digit) {
		// La date
		if ((line == null) || (line.length() < 1))
			return null;

		// La date
		Date evDate = null;

		String strDate = "";
		String[] traDateStr = line.split("\\/");
		if ((traDateStr != null) && (traDateStr.length == 3)) {
			int l = (traDateStr[0].trim()).length();
			if (l > 2) {
				strDate = (traDateStr[0].trim()).substring(l - 2, l) + "/"
						+ traDateStr[1].trim() + "/";
				if (year4Digit)
					strDate += (traDateStr[2].trim()).substring(0, 4) + " "
							+ (traDateStr[2].trim()).substring(5, 10);
				else
					strDate += "20" + (traDateStr[2].trim()).substring(0, 2)
							+ " " + (traDateStr[2].trim()).substring(3, 8);
			}
		}

		if (strDate.length() != 0) {
			if ((year4Digit) || (this.lastDateFormat.length() == 0))
				this.lastDateFormat = this.getDateFormat(fileDate, strDate);

			SimpleDateFormat dateTimesFormat = new SimpleDateFormat(
					this.lastDateFormat);

			try {
				evDate = dateTimesFormat.parse(strDate);
			} catch (ParseException ex) {
				logger.error("Error in date" + strDate + " ex:", ex);
			}
		}

		return evDate;
	}

	private int processTraComplete(ServiceContext ctx, String line, Date elogDate, Date evDate, int traType) {
		int firstLine = this.lastLine;
		
		EjrTransaction tra = new EjrTransaction();
		ArrayList<EjrTransaction> traList = new ArrayList<EjrTransaction>();

		// Create Transaction
		tra.setTraBanId(this.getTopNe().getNeBanId());
		tra.setTraBraId(this.getTopNe().getNeBraId());
		tra.setTraNeId(this.getTopNe());
		tra.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_YES);
		tra.setTraRetract(EjrTransactionCsts.TRA_RETRACT_NO);
		
		tra.setTraInsDate(evDate);
		tra.setTraNote1(0);
		tra.setTraNote2(0);
		tra.setTraNote3(0);
		tra.setTraNote4(0);

		int msgType = traType;
		String trak2Pan=null;
		if (traType != AnalyzerCamWinCst.TRA_CODE) {
			msgType = AnalyzerCamWinCst.START_TRX;
		}

		String newLine = "";
		String cashLine = "";
		boolean taken = false;
		boolean retract = false;
		Matcher mLineCash = null;
		boolean isFirst = true;
		String[] lignes=new String[6];
		int k=0;
		do {
			if ((traType == AnalyzerCamWinCst.TRA_CODE) && (isFirst)) {
				newLine = line;
			} else {
				try {
					lastLine++;
					if (!this.lines.isEmpty())
						newLine = this.lines.remove(0);
					else {
						newLine = "00:00:00 <- TRANSACTION END";
						//break;
					}
				} catch (Exception ex) {
					logger.error("Error reading log file :"
							+ EjCamAnalyzerSigma.fileDateFormat.format(elogDate)
							+ " at line :" + this.lastLine + 1
							+ " with reason :" + ex.getMessage());
					lastLine = firstLine;
					return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
				}

				newLine = newLine.toUpperCase();
			}
			
			logger.info("processTraComplete -> newLine="+newLine);
			isFirst = false;
			newLine = newLine.toUpperCase();

			MsgResponse msgResponse = getResponse(newLine);
			msgType = msgResponse.getMsgType();
			
			
			
			
			switch (msgType) {
			case AnalyzerCamWinCst.CASH_TAKEN:
				// if(startDate==null) startDate=this.getDateForLine(elogDate,
				// line);
				if ((tra.getTraType() != null)
						&& (tra.getTraType() == EjrTransactionCsts.TRA_TYPE_RETRAIT)) {
					if ((tra.getTraRetract() == EjrTransactionCsts.TRA_RETRACT_NO)
							&& (!retract))
						tra.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_YES);
				} else {
					if (!retract)
						taken = true;
				}
				break;

			case AnalyzerCamWinCst.CASH_RETRACTED:
				if ((tra.getTraType() != null)
						&& (tra.getTraType() == EjrTransactionCsts.TRA_TYPE_RETRAIT)) {
					tra.setTraRetract(EjrTransactionCsts.TRA_RETRACT_YES);
					tra.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_NO);
				} else {
					taken = false;
					retract = true;
				}
				break;

			case AnalyzerCamWinCst.CASH:

				if (((tra.getTraType() != null) && (tra.getTraType() == EjrTransactionCsts.TRA_TYPE_RETRAIT))
						&& ((tra.getTraRespCode() == null) || (tra
								.getTraRespCode().compareTo("000") == 0)))
					processCashLine(elogDate, newLine, tra);
				else if (traList.size() > 0) {
					int indice = traList.size() - 1;
					EjrTransaction lastTra = traList.get(indice);
					if (((lastTra.getTraType() != null) && (lastTra
							.getTraType() == EjrTransactionCsts.TRA_TYPE_RETRAIT))
							&& ((lastTra.getTraRespCode() == null) || (lastTra
									.getTraRespCode().compareTo("000") == 0)))
						processCashLine(elogDate, newLine, lastTra);
					else
						cashLine = newLine;
				} else
					cashLine = newLine;
				break;

			case AnalyzerCamWinCst.CARD_RETAINED:
				if ((tra != null) && (tra.getTraRespCode() != null)
						&& (tra.getTraRespCode().length() > 0)) {
					tra.setTraType(EjrTransactionCsts.TRA_TYPE_CAP_CART);
				} else if (traList.size() > 0) {
					int indice = traList.size() - 1;
					EjrTransaction lastTra = traList.get(indice);
					lastTra.setTraType(EjrTransactionCsts.TRA_TYPE_CAP_CART);
				}
				break;
				
			case AnalyzerCamWinCst.CARD_RETAINED_BY_ATM:
				tra.setTraType(EjrTransactionCsts.TRA_TYPE_CAP_CART);
				tra.setTraPan(msgResponse.getMatcher().group(2));
				traList.add(tra);
				if (cashLine != null)
					cashLine = null;
				
				tra = new EjrTransaction();
				tra.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_YES);
				tra.setTraRetract(EjrTransactionCsts.TRA_RETRACT_NO);
				tra.setTraBanId(this.getTopNe().getNeBanId());
				tra.setTraBraId(this.getTopNe().getNeBraId());
				
				tra.setTraNeId(this.getTopNe());
				tra.setTraInsDate(evDate);
				tra.setTraNote1(0);
				tra.setTraNote2(0);
				tra.setTraNote3(0);
				tra.setTraNote4(0);
				break;

			case AnalyzerCamWinCst.TRACK_2_DATA:
				trak2Pan=msgResponse.getMatcher().group(2);
				tra.setTraPan(trak2Pan);
				break;
				
			case AnalyzerCamWinCst.TRA_CODE:

				int res = processDTBloc(ctx, tra, msgResponse, elogDate);
				
				if(res==AnalyzerCamWinCst.END_TRX) {
					msgType = AnalyzerCamWinCst.END_TRX;
					break;
				}
				
				if (res >=0){				
					if ((cashLine != null) && (cashLine.length()>1)
							&& (tra.getTraType() == EjrTransactionCsts.TRA_TYPE_RETRAIT)) {
						processCashLine(elogDate, cashLine, tra);
						cashLine = null;
					}
					if (tra.getTraType() != EjrTransactionCsts.TRA_TYPE_RETRAIT) {
						tra.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_NO);
					}
					traList.add(tra);
					if (res >0) {            	
	            		saveEjrTransactions(ctx, tra, traList, elogDate, mLineCash);
	            		return res;
	                }
				} else
					System.out.println(" Failed at : " + msgResponse.getLine());
				tra = new EjrTransaction();
				tra.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_YES);
				tra.setTraRetract(EjrTransactionCsts.TRA_RETRACT_NO);
				tra.setTraBanId(this.getTopNe().getNeBanId());
				tra.setTraBraId(this.getTopNe().getNeBraId());
				
				tra.setTraNeId(this.getTopNe());
				tra.setTraInsDate(evDate);
				tra.setTraNote1(0);
				tra.setTraNote2(0);
				tra.setTraNote3(0);
				tra.setTraNote4(0);
				break;

			case AnalyzerCamWinCst.START_TRX:
//			case AnalyzerCamWinCst.TRACK_2_DATA:
//			case AnalyzerCamWinCst.PIN_ENTRED:
//			case AnalyzerCamWinCst.TRANS_REQ:
			case AnalyzerCamWinCst.END_TRX:
			case AnalyzerCamWinCst.CUTOFF:
			case AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY:
			
				
//
//				if ((tra != null) && (tra.getTraRespCode() != null)
//						&& (tra.getTraRespCode().length() != 0)) 
				if (tra!=null){
					if ((cashLine != null) &&  (cashLine.length()>1)){
						if (tra.getTraType() == null) {
							tra.setTraType(EjrTransactionCsts.TRA_TYPE_SUSP_RETRAIT);
							tra.setTraPan(trak2Pan);
						}
						
						if (((tra.getTraType() != null) && ( (tra.getTraType() == EjrTransactionCsts.TRA_TYPE_RETRAIT) 
								|| (tra.getTraType() == EjrTransactionCsts.TRA_TYPE_SUSP_RETRAIT)))
								&& ((tra.getTraRespCode() == null) || (tra
										.getTraRespCode().compareTo("000") == 0))) {
							processCashLine(elogDate, cashLine, tra);
							if (tra.getTraRespCode() == null)
								tra.setTraRespCode("000");
							if (tra.getTraAmount() == null){
								BigDecimal traAmtNote1 = new BigDecimal(tra.getTraNote1()*DEFAULT_CAS1_VAL);
								BigDecimal traAmtNote2 = new BigDecimal(tra.getTraNote2()*DEFAULT_CAS2_VAL);
								tra.setTraAmount(traAmtNote1.add(traAmtNote2));
							}
							cashLine = null;
						}
					}
					if ((tra.getTraType() != null) &&  (tra.getTraType() != EjrTransactionCsts.TRA_TYPE_RETRAIT) && (tra.getTraType() != EjrTransactionCsts.TRA_TYPE_SUSP_RETRAIT)) {
						tra.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_NO);
					}
					
					if ((tra != null) && (tra.getTraRespCode() != null)
							&& (tra.getTraRespCode().length() != 0)) 
						traList.add(tra);
				}

				saveEjrTransactions(ctx, tra, traList, elogDate, mLineCash);
      	      
                if ((msgType == AnalyzerCamWinCst.START_TRX) ||
               	 (msgType == AnalyzerCamWinCst.CUTOFF) ||
               	 (msgType == AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY) ||
               	 (msgType == AnalyzerCamWinCst.TRACK_2_DATA)||
               	 (msgType == AnalyzerCamWinCst.TRANS_REQ) ||
               	 (msgType == AnalyzerCamWinCst.PIN_ENTRED)) {
               	 this.lineToProcess=newLine;
               	 return msgType;
                }
                msgType = AnalyzerCamWinCst.END_TRX;
				break;
			}
		} while (msgType != AnalyzerCamWinCst.END_TRX);
		return PROCESS_OK;
	}

	private void saveEjrTransactions(ServiceContext ctx, EjrTransaction tra, ArrayList<EjrTransaction> traList, Date elogDate, Matcher mLineCash){

        // Enregistrer
        Iterator<EjrTransaction> it = traList.iterator();
        while(it.hasNext())
        {               
        	EjrTransaction tra1 = (EjrTransaction)it.next();

            if(startDate==null)
                startDate=tra1.getTraTraDate();
            ejrTransactionService.save(ctx, tra1);
            
            if ((lastEventDate==null) || (startDate.after(lastEventDate)))
            {
                lastEventDate=startDate;
            }                     
        }
	}
	private int processCashLine(Date elogDate, String newLine,
			EjrTransaction lastTra) {
		 ArrayList<MsgResponse> ll = getCashResponse(newLine);
		 
		 if ((ll ==  null)|| (ll.isEmpty()))
			 return PROCESS_OK;
		 
		 for (int i=0; i< ll.size(); i++){
			 MsgResponse cashResp = ll.get(i);
			 int cas = Integer.parseInt(cashResp.getMatcher().group(1));
			 int traNote = Integer.parseInt(cashResp.getMatcher().group(2));
			 switch (cas){
			 case 1:
				 lastTra.setTraNote1(traNote);
				 break;
				 
			 case 2:
				 lastTra.setTraNote2(traNote);
				 break;
				 
			 case 3:
				 lastTra.setTraNote3(traNote);
				 break;
				 
			 case 4:
				 lastTra.setTraNote4(traNote);
				 break;
			 }
		 }
		
		return PROCESS_OK;

	}

	private int processDTBloc(ServiceContext ctx, EjrTransaction tra, MsgResponse msgResponse,
			Date eLogDate) {
		String newLine = "";
		// Process DT line
		int res = processCLine(tra, msgResponse);
		if (res != PROCESS_OK) {
			return res;
		}
		// Passer a la ligne suivante
		boolean end = false;
		while (!end) {
			try {
                lastLine++;
                if (!this.lines.isEmpty())
   				 newLine =this.lines.remove(0);
   			 	else{
					return PROCESS_OK;
                }
            }
            catch (Exception ex)  {
            	logger.error("Error reading log file : at line :"+this.lastLine+1+" with reason :"+ex.getMessage());
				// lastLine=firstLine;
				return PROCESS_NOK_SYSTEM_ERROR;
			}
			newLine = newLine.trim();
			logger.info("processDTBloc --> newLine="+newLine);
			if (newLine.length() < 1) {
				continue;
			}

			newLine = newLine.toUpperCase();
			MsgResponse traResp = getResponse(newLine);
			int msgType = traResp.getMsgType();

			switch (msgType) {
			case AnalyzerCamWinCst.LINE_DT:
				res = processDTLine(tra, traResp);
				if (res != PROCESS_OK) {
					return res;
				}
				// if (tra.getTraType() == RecTransaction.TRA_TYPE_DEPOT_CASH)
				// return res;

				break;

			case AnalyzerCamWinCst.CARD:
				tra.setTraPan(traResp.getMatcher().group(1));
				break;

			case AnalyzerCamWinCst.ACCOUNT:
				tra.setTraAccount(traResp.getMatcher().group(1));
				break;

			case AnalyzerCamWinCst.RESPONSE_CODE:
				tra.setTraRespCode(traResp.getMatcher().group(1));
				return PROCESS_OK;

			case AnalyzerCamWinCst.AMOUNT:
				res = processAmountLine(ctx, tra, traResp);
				if (res != PROCESS_OK) {
					return res;
				}
				break;
			case AnalyzerCamWinCst.ACCEPTABLE:
				break;

			case AnalyzerCamWinCst.START_TRX:
			case AnalyzerCamWinCst.CUTOFF:
			case AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY:
			case AnalyzerCamWinCst.TRACK_2_DATA:
			case AnalyzerCamWinCst.PIN_ENTRED:
			case AnalyzerCamWinCst.TRANS_REQ:
			case AnalyzerCamWinCst.END_TRX:
				this.lineToProcess=newLine;
            	return msgType;

			}
		}
		return PROCESS_OK;
	}

	private int processAmountLine(ServiceContext ctx, EjrTransaction tra, MsgResponse traResp) {

		String traAmountS = traResp.getMatcher().group(2);
		BigDecimal traAmt = null;
		try {
			traAmt = new BigDecimal(traAmountS);
		} catch (Exception e) {
			System.out.println("processAmountLine --> Bad transaction amount ("
					+ traAmountS + ") :" + traResp.getLine());
			return PROCESS_NOK_SYSTEM_ERROR;
		}
		tra.setTraAmount(traAmt);
		
		 //Currency
        String curCode = traResp.getMatcher().group(1);
        if (this.lastUsedCurrency==null || this.lastUsedCurrency.getCurCode().compareTo(curCode)!=0) {
        	ParCurrency cur = parCurrencyService.findParCurrencyByCode(ctx, curCode);

        	this.lastUsedCurrency = cur;
        }
        tra.setTraCurId(this.lastUsedCurrency);

		return PROCESS_OK;
	}

	private int processCLine(EjrTransaction tra, MsgResponse traResp) {
		long traTypeId = EjrTransactionCsts.TRA_TYPE_UNKNOWN;
		String traLine = traResp.getLine().trim();

		if (traLine.contains("BALANCE INQUIRY")) {
			traTypeId = EjrTransactionCsts.TRA_TYPE_DEM_SOLDE;
		} else if (traLine.contains("MINI RELEVE")) {
			traTypeId = EjrTransactionCsts.TRA_TYPE_MIN_REL;
		} else if (traLine.contains("PIN CHANGE")) {
			traTypeId = EjrTransactionCsts.TRA_TYPE_PIN_CHANGE;
		} else if (traLine.contains("TRANSFER")) {
			traTypeId = EjrTransactionCsts.TRA_TYPE_TRANSFERT;
		} else if (traLine.contains("CASH WITHRAWAL")) {
			traTypeId = EjrTransactionCsts.TRA_TYPE_RETRAIT;
		} else if (traLine.contains("CASH DEPOSIT")) {
			traTypeId = EjrTransactionCsts.TRA_TYPE_DEPOT_CASH;
		} else if (traLine.contains("CHEQUE DEPOSIT")) {
			traTypeId = EjrTransactionCsts.TRA_TYPE_DEPOT_CHEQUE;
		} else if (traLine.contains("AUTHENTIFICATION")) {
			traTypeId = EjrTransactionCsts.TRA_TYPE_AUTHEN;
		} else if (traLine.contains("AUTHENTICATION")) {
			traTypeId = EjrTransactionCsts.TRA_TYPE_AUTHEN;
		} else if (traLine.contains("TRANSACTION ANNULEE")) {
			traTypeId = EjrTransactionCsts.TRA_TYPE_ANNULLE;
		} else if (traLine.contains("CAPTURE DE CARTE")) {
			traTypeId = EjrTransactionCsts.TRA_TYPE_CAP_CART;
		}

		if (traTypeId == EjrTransactionCsts.TRA_TYPE_UNKNOWN) {
			System.out
					.println("processCLine --> Unknown transaction type at C line :"
							+ traResp.getLine());
			return PROCESS_NOK_SYSTEM_ERROR;
		}
		// tra.setTraCardNbr(traResp.getMatcher().group(1).trim());
		tra.setTraType(traTypeId);
		tra.setTraTrtId(this.transTypeMap.get(traTypeId));
		if (traTypeId != EjrTransactionCsts.TRA_TYPE_RETRAIT)
			tra.setTraCashTaken(EjrTransactionCsts.TRA_CASH_TAKEN_NO);

		return PROCESS_OK;
	}

	private int processDTLine(EjrTransaction tra, MsgResponse msgResponse) {

		Matcher m = msgResponse.getMatcher();
		Date traDate = null;
		try {
			traDate = TraDateFormat.parse(m.group(1) + " " + m.group(2));
		} catch (ParseException e) {
			System.out.println("processDTLine --> Incorrect tra date ("
					+ m.group(1) + " " + m.group(2) + ") at line :");
			return PROCESS_NOK_SYSTEM_ERROR;
		}
		tra.setTraTraDate(traDate);
		// tra.setTraRespCode(m.group(3));
		// if (msgResponse.getMsgType() == AnalyzerCamWinCst.LINE_DT)
		tra.setTraRef(m.group(3));

		return PROCESS_OK;
	}

	private int processCashPresented(Date fileDate, Matcher mLineCash,
			EjrTransaction tra, Date startDate) {

		
		// logger.error("Notes Presented: "+tra.getTraMontant());
		// logger.error("line :"+line);
		// 13:36:05 NOTES PRESENTED 1,0,0,0

		/*
		 * int[] nbrCas=new int[4];
		 * 
		 * Date date = null; String strDate =""; SimpleDateFormat
		 * dateTimesFormat=new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		 * SimpleDateFormat dateFormat=new SimpleDateFormat("dd/MM/yyyy");
		 * 
		 * if (startDate!=null) { strDate = dateFormat.format(startDate) + " " +
		 * mLineCash.group(1); } else if((tra!=null)&& (tra.getTraDate()!=null))
		 * { strDate = dateFormat.format(tra.getTraDate()) + " " +
		 * mLineCash.group(1); } if (strDate.length()>0) { try { date =
		 * dateTimesFormat.parse(strDate); } catch (ParseException ex) {
		 * ex.printStackTrace(); } } // Tenter autre chose // if (date == null)
		 * // date=getDateForLine(fileDate, mLineCash.group(1)); // //
		 * this.lastEventDate=date;
		 * 
		 * String[] unBi=mLineCash.group(2).split(",");
		 * 
		 * nbrCas[0]=Integer.parseInt(unBi[0]);
		 * nbrCas[1]=Integer.parseInt(unBi[1]);
		 * nbrCas[2]=Integer.parseInt(unBi[2]);
		 * nbrCas[3]=Integer.parseInt(unBi[3]);
		 * 
		 * tra.setTraNote1(nbrCas[0]); tra.setTraNote2(nbrCas[1]);
		 * tra.setTraNote3(nbrCas[2]); tra.setTraNote4(nbrCas[3]);
		 */

		return PROCESS_OK;
	}
	
	private int processCutOff(ServiceContext ctx, String line, Date elogDate, Date startDate) {
		EjrArreteCentral art = new EjrArreteCentral();
		art.setArcNeId(this.getTopNe());
		art.setArcActArgnum("0");
		art.setArcProcStatus(EjrProcStatusCsts.PROC_STATUS_INSTANCE);
		art.setArcBanId(this.getTopNe().getNeBanId());
		String newLine="";
        String cashPwcsLine="";
        int cashPwcsLineNbr=0;
        int msgType =AnalyzerCamWinCst.CUTOFF;
        boolean isActuel=false;
       
        while (msgType != AnalyzerCamWinCst.CUT_END) {
        	try {
                lastLine++;
                if (!this.lines.isEmpty())
   				 newLine =this.lines.remove(0);
   			 	else{
                    newLine="========================================";
                    //break;
                }
            }
            catch (Exception ex) {
                logger.error("Error reading log file :"+EjCamAnalyzerSigma.fileDateFormat.format(elogDate)+" at line :"+this.lastLine+1+" with reason :"+ex.getMessage());
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }

        	newLine = newLine.toUpperCase();
        	MsgResponse msgResponse = getCutOffResponse(newLine);
            msgType = msgResponse.getMsgType();
        	
            switch (msgType){
            case AnalyzerCamWinCst.START_TRX:
			case AnalyzerCamWinCst.TRA_CODE:
			case AnalyzerCamWinCst.CUTOFF:
			case AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY:
			case AnalyzerCamWinCst.TRACK_2_DATA:
			case AnalyzerCamWinCst.PIN_ENTRED:
			case AnalyzerCamWinCst.TRANS_REQ:
				this.lineToProcess=newLine;
				return msgType;
				
            case AnalyzerCamWinCst.CUT_NO_CUTOFF:
            	return PROCESS_OK;
            	
            case AnalyzerCamWinCst.CUT_CASHPWCS:
            	try {
                    lastLine++;
                    if (!this.lines.isEmpty())
                    	cashPwcsLine =this.lines.remove(0);
       			 	else{
       			 		msgType = AnalyzerCamWinCst.CUT_END;
                    }
                    cashPwcsLineNbr=lastLine;
                }
                catch (Exception ex) {
                    logger.error("Error reading log file :"+EjCamAnalyzerSigma.fileDateFormat.format(elogDate)+" at line :"+this.lastLine+1+" with reason :"+ex.getMessage());
                    return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
                }
            	break;
            	
            case AnalyzerCamWinCst.CUT_ARRETE_NO:
            	art.setArcNumero(msgResponse.getMatcher().group(1));
            	break;
            	
            case AnalyzerCamWinCst.CUT_ARRETE_DATE:
            	String dateString= msgResponse.getMatcher().group(1);
                DateFormat dateFormat = new SimpleDateFormat("yyyyMMddhhmmss");
                Date evDate=null;
                try {
                    evDate = dateFormat.parse(dateString);
                } catch (ParseException ex) {
                    logger.error("Incorrect date format :"+" at line No :"+this.lastLine);
                    ex.printStackTrace();
                }
                if (evDate == null)
                {
                    logger.warn("Cutoff not wel formatted at line :"+lastLine);
                    return PROCESS_NOK_INCORRECT_DATE_FORMAT;
                }
            	art.setArcDate(evDate);
            	break;
            	
            case AnalyzerCamWinCst.CUT_CAPTURE_NBR:
            	try{
            		art.setArcCapture(Integer.parseInt(msgResponse.getMatcher().group(1)));
                } catch (Exception ex) {
                    logger.warn("Cutoff not wel formatted at line 2 :"+lastLine);
                    ex.printStackTrace();
                    return PROCESS_OK;
                }
            	break;
            	
            case AnalyzerCamWinCst.CUT_TRANCHE:
            	art.setArcTranche(msgResponse.getMatcher().group(1)+"-"+msgResponse.getMatcher().group(2));
            	break;
            	
            case AnalyzerCamWinCst.CUT_MONNAIE:
            	ParCurrency cur = parCurrencyService.findParCurrencyByCode(ctx, msgResponse.getMatcher().group(1));
            	art.setArcCurId(cur);
            	break;
            	
            case AnalyzerCamWinCst.CUT_APP_TRN_NBR:
            	Integer trnNbr=null;
            	try{
            		trnNbr= Integer.parseInt(msgResponse.getMatcher().group(1));
                } catch (Exception ex) {
                    logger.warn("Cutoff not wel formatted at line :"+lastLine);
                    ex.printStackTrace();
                    return PROCESS_OK;
                }
            		
            	if (isActuel)
            		art.setArcActAppTrnNbr(trnNbr);
            	else
            		art.setArcAppTrnNbr(trnNbr);
            	break;
            	
            case AnalyzerCamWinCst.CUT_APP_TRN_AMT:
            	String traAmountS=msgResponse.getMatcher().group(2);
    			BigDecimal traAmt=null;
    			try{
    				traAmt=new BigDecimal(traAmountS);
    			} catch(Exception e) {
    				System.out.println("processAmountLine --> Bad transaction amount ("+traAmountS+") :"+msgResponse.getLine());
    	            return PROCESS_NOK_SYSTEM_ERROR;
    			}
    			
    			if (isActuel)
            		art.setActAppTrnAmt(traAmt);
    			else
    				art.setArcAppTrnAmt(traAmt);
    			break;
    			
            case AnalyzerCamWinCst.CUT_REV_TRN_NBR:
            	Integer revNbr=null;
            	try{
            		revNbr= Integer.parseInt(msgResponse.getMatcher().group(1));
                } catch (Exception ex) {
                    logger.warn("Cutoff not wel formatted at line :"+lastLine);
                    ex.printStackTrace();
                    return PROCESS_OK;
                }
            	
            	if (isActuel)
            		art.setArcActRevTrnNbr(revNbr);
            	else
            		art.setArcRevTrnNbr(revNbr);
            	break;
            	
            case AnalyzerCamWinCst.CUT_REV_TRN_AMT:
            	String revAmountS=msgResponse.getMatcher().group(2);
    			BigDecimal revAmt=null;
    			try{
    				revAmt=new BigDecimal(revAmountS);
    			} catch(Exception e) {
    				System.out.println("processAmountLine --> Bad transaction amount ("+revAmountS+") :"+msgResponse.getLine());
    	            return PROCESS_NOK_SYSTEM_ERROR;
    			}
    			
    			if (isActuel)
            		art.setArcActRevTrnAmt(revAmt);
    			else
    				art.setArcRevTrnAmt(revAmt);
    			break;
    			
            case AnalyzerCamWinCst.CUT_APPSUSP_NBR :
            	Integer susNbr=null;
            	try{
            		susNbr= Integer.parseInt(msgResponse.getMatcher().group(1));
                } catch (Exception ex) {
                    logger.warn("Cutoff not wel formatted at line :"+lastLine);
                    ex.printStackTrace();
                    return PROCESS_OK;
                }
            	
            	if (isActuel)
            		art.setArcActAppsuspNbr(susNbr);
            	else
            		art.setArcAppsuspNbr(susNbr);
            	break;

            case AnalyzerCamWinCst.CUT_APPSUSP_AMT:
            	String susAmountS=msgResponse.getMatcher().group(2);
    			BigDecimal susAmt=null;
    			try{
    				susAmt=new BigDecimal(susAmountS);
    			} catch(Exception e) {
    				System.out.println("processAmountLine --> Bad transaction amount ("+susAmountS+") :"+msgResponse.getLine());
    	            return PROCESS_NOK_SYSTEM_ERROR;
    			}
    			
    			if (isActuel)
            		art.setArcActAppsuspAmt(susAmt);
    			else
    				art.setArcAppsuspAmt(susAmt);
    			break;
    			
            case AnalyzerCamWinCst.CUT_ACTUEL_DATE:
            	dateString= msgResponse.getMatcher().group(1);
                dateFormat = new SimpleDateFormat("yyMMddHHmmss");
                evDate=null;
                isActuel=true;
                try {
                    evDate = dateFormat.parse(dateString);
                } catch (ParseException ex) {
                    logger.error("Incorrect date format :"+" at line No :"+this.lastLine);
                    ex.printStackTrace();
                }
                if (evDate == null)
                {
                    logger.warn("Cutoff not wel formatted at line :"+lastLine);
                    return PROCESS_NOK_INCORRECT_DATE_FORMAT;
                }
            	art.setArcActDate(evDate);
            	break;
            	
            case AnalyzerCamWinCst.CUT_END:
            	art.setArcInsDate(startDate);
            	art = ejrArreteCentralService.save(ctx, art);
            	if(cashPwcsLine.length()!=0) {
            		Date cashEvDate=this.processCutoffCash(ctx, art, startDate, cashPwcsLine);
            	}
            	break;
            }
        }
        
		return PROCESS_OK;		
	}
	
	private int readCashCounter(ServiceContext ctx,Date evDate,String line,boolean cashCleard) {
        
    	System.out.println("readCashCounter "+line);
    	/*if   ((lastCashFileName!=null)
             &&(lastCashFileName.length()>0)
             &&(lastCashLine>0)
             &&(lastCashFileName.compareTo(this.getCurrentFile())==0)
             &&(lastCashLine>=this.getLastLine()))
         {
             return LogAnalyser.LOG_ANALYSER_REFRESH_OK;
         }*/
        int firstLine=this.getLastLine();
         if(this.cashAlreadyProc(ctx,evDate,firstLine))
         {
             logger.info("readCashCounter---lastLine: "+lastLine);
             return EjrFileProcessor.PROCESS_OK;
         }

        EjrCashCounter cash= new EjrCashCounter();        
        cash.setCacNeId(getTopNe());
        cash.setCacDate(evDate);
        lastEventDate=evDate;        
        cash.setCacType(EjrCashCounterCsts.CASH_COUNTER_TYPE_S);
        String newLine=line;
         lineBefore=newLine;    
			lastLine++;                    
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}

                    /***** cas1 && cas2*****/

            //Valeurs
            System.out.println("newLine="+newLine);
            String[] cas=newLine.split("[\\s]+");
            if((cas==null)|| (cas.length!=4))
            {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }
            else
            {
                    cash.setCacCas1Val(Integer.parseInt(cas[2]));
                    cash.setCacCas2Val(Integer.parseInt(cas[3]));

            }
            lineBefore=newLine;    
			lastLine++;
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}

            //Rejets
            System.out.println("newLine="+newLine);
            cas=newLine.split("[\\s]+");
            if((cas==null)|| (cas.length!=3))
            {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }
            else
            {
                cash.setCacCas1Rej(Integer.parseInt(cas[1]));
                cash.setCacCas2Rej(Integer.parseInt(cas[2]));
            }

            lineBefore=newLine;    
			lastLine++;
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}

            //Dispensed
            cas=newLine.split("[\\s]+");
            System.out.println("newLine="+newLine);
            if((cas==null)|| (cas.length!=3))
            {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }
            else
            {
                cash.setCacCas1Disp(Integer.parseInt(cas[1]));
                cash.setCacCas2Disp(Integer.parseInt(cas[2]));
            }

            lineBefore=newLine;    
			lastLine++;                    
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
            
            lineBefore=newLine;
			lastLine++;
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}

            //Total
            System.out.println("newLine="+newLine);
            cas=newLine.split("[\\s]+");            
            if((cas==null)|| (cas.length!=3))
            {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }
            else
            {
                cash.setCacCas1Tot(Integer.parseInt(cas[1]));
                cash.setCacCas2Tot(Integer.parseInt(cas[2]));
            }
            lineBefore=newLine;    
			lastLine++;
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
             lineBefore=newLine;   
			lastLine++;
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}

                    /***** cas3 && cas4*****/
            //Valeurs
             System.out.println("newLine="+newLine);
            cas=newLine.split("[\\s]+");
            if((cas==null)|| (cas.length!=4))
            {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }
            else
            {
                cash.setCacCas3Val(Integer.parseInt(cas[2]));
                cash.setCacCas4Val(Integer.parseInt(cas[3]));
            }
            lineBefore=newLine;    
			lastLine++;
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}

             //Rejets
            System.out.println("newLine="+newLine);
            cas=newLine.split("[\\s]+");
            if((cas==null)|| (cas.length!=3))
            {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }
            else
            {
                cash.setCacCas3Rej(Integer.parseInt(cas[1]));
                cash.setCacCas4Rej(Integer.parseInt(cas[2]));
            }

            lineBefore=newLine;    
			lastLine++;
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}
             lineBefore=newLine;   
			lastLine++;
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}

            //Dispensed
            System.out.println("newLine="+newLine);
            cas=newLine.split("[\\s]+");
            if((cas==null)|| (cas.length!=3))
            {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }
            else
            {
                cash.setCacCas3Disp(Integer.parseInt(cas[1]));
                cash.setCacCas4Disp(Integer.parseInt(cas[2]));
            }

            lineBefore=newLine;    
			lastLine++;
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}

            //=Total
            System.out.println("newLine="+newLine);
            cas=newLine.split("[\\s]+");
            if((cas==null)|| (cas.length!=3))
            {
                lastLine=firstLine+1;
                return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
            }
            else
            {
                cash.setCacCas3Tot(Integer.parseInt(cas[1]));
                cash.setCacCas4Tot(Integer.parseInt(cas[2]));
            }

            //last cleared
            String before=newLine;
            lineBefore=newLine;
			lastLine++;
			newLine = getLine(newLine);if (newLine==null){lastLine=firstLine;return EjrFileProcessor.PROCESS_OK_END_OF_FILE;}

            processLastCleared(ctx,newLine,before,evDate);

            System.out.println("newLine="+newLine);
            System.out.println("before="+before);
            System.out.println("evDate="+evDate);

            //CARDS CAPTURED    00005
            /*try {
                lineBefore=newLine;
                lastLine++;
                newLine = this.reader.readLine();if (newLine==null){lastLine=firstLine;return LogAnalyser.LOG_ANALYSER_END_OF_FILE;}
                System.out.println("newLine="+newLine);
            } catch (IOException ex) {
                log.error("Error reading log file :"+this.getCurrentFile()+" at line :"+this.getLastLine()+1+" with reason :"+ex.getMessage());
                lastLine=firstLine;
                ex.printStackTrace();
                return LogAnalyser.LOG_ANALYSER_SYSTEM_ERROR;
            }
             try {
                lastLine++;
                lineBefore=newLine;
                newLine = this.reader.readLine();if (newLine==null){lastLine=firstLine;return LogAnalyser.LOG_ANALYSER_END_OF_FILE;}
                System.out.println("newLine="+newLine);
            } catch (IOException ex) {
                log.error("Error reading log file :"+this.getCurrentFile()+" at line :"+this.getLastLine()+1+" with reason :"+ex.getMessage());
                lastLine=firstLine;
                ex.printStackTrace();
                return LogAnalyser.LOG_ANALYSER_SYSTEM_ERROR;
            }*/
            /* try {
                lastLine++;
                newLine = this.reader.readLine();if (newLine==null){lastLine=firstLine;return LogAnalyser.LOG_ANALYSER_END_OF_FILE;}
                System.out.println("newLine="+newLine);
            } catch (IOException ex) {
                log.error("Error reading log file :"+this.getCurrentFile()+" at line :"+this.getLastLine()+1+" with reason :"+ex.getMessage());
                lastLine=firstLine;
                ex.printStackTrace();
                return LogAnalyser.LOG_ANALYSER_SYSTEM_ERROR;
            }*/
            /*int pos=newLine.indexOf("CARDS CAPTURED");
            if (pos == -1){
                log.warn("Error on CARDS CAPTURED at line :"+lastLine);             
            }
            else
            {
                String[] carte=newLine.split("[\\s]+");
                if ((carte!=null) && (carte.length>3))
                cash.setCacCarte(Integer.parseInt(carte[3]));

                 //last cleared
                 before=newLine;
                try {
                        lastLine++;
                        lineBefore=newLine;                        
                        newLine = this.reader.readLine();if (newLine==null){lastLine=firstLine;return LogAnalyser.LOG_ANALYSER_END_OF_FILE;}
                        System.out.println("newLine="+newLine);
                    } catch (IOException ex) {
                        log.error("Error reading log file :"+this.getCurrentFile()+" at line :"+this.getLastLine()+1+" with reason :"+ex.getMessage());
                        lastLine=firstLine;
                        ex.printStackTrace();
                        return LogAnalyser.LOG_ANALYSER_SYSTEM_ERROR;
                    }
                     processLastCleared(newLine,before,evDate);
            }*/
            
            //inserer cash
            cash.setCacCas1Val(EjrFileProcessor.DEFAULT_CAS1_VAL);
			cash.setCacCas2Val(EjrFileProcessor.DEFAULT_CAS2_VAL);
			cash.setCacCas3Val(EjrFileProcessor.DEFAULT_CAS3_VAL);
			cash.setCacCas4Val(EjrFileProcessor.DEFAULT_CAS4_VAL);
            cash.setCacCas1Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
            cash.setCacCas2Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
            cash.setCacCas3Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
            cash.setCacCas4Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);

            if(
               (cashCleard)
             &&((cash.getCacCas1Tot()-cash.getCacCas1Disp()-cash.getCacCas1Rej())==0)
             &&((cash.getCacCas2Tot()-cash.getCacCas2Disp()-cash.getCacCas2Rej()==0))
             &&((cash.getCacCas3Tot()-cash.getCacCas3Disp()-cash.getCacCas3Rej()==0))
             &&((cash.getCacCas4Tot()-cash.getCacCas4Disp()-cash.getCacCas4Rej())==0)
             )
            {
            	return EjrFileProcessor.PROCESS_OK;
            }

            cash.setCacLastcashLine(String.valueOf(firstLine));
            
            if(this.getCurrentFile()!=null)
                lastCashFileName=this.getCurrentFile();
            lastCashLine=firstLine;
            if (cash!=null)
            {
                calculCashAlim(ctx,cash);
                updateCass(ctx,cash);
            }
            
            System.out.println("CashCounterManager.insert==================>"+cash);
            ejrCashCounterService.save(ctx, cash);
            logger.info("ReadCashCounter!!:cashCounter est inséré:"+cash.getCacDate());
            
            return EjrFileProcessor.PROCESS_OK;
    }

	
	private int readCashCounter2(ServiceContext ctx, Date evDate, String line,
			boolean cashCleard) {
		int msgType = AnalyzerCamWinCst.TYPE_1_TYPE_2;
		String newLine = "";
		boolean isFirst = true;
		boolean isClearCard = false;
		boolean end = false;
		EjrCashCounter cash = new EjrCashCounter();
		cash.setCacNeId(this.getTopNe());
		cash.setCacBanId(this.getTopNe().getNeBanId());
		cash.setCacDate(evDate);
		lastEventDate = evDate;
		cash.setCacProcStatus(EjrProcStatusCsts.PROC_STATUS_INSTANCE);
		cash.setCacType(EjrCashCounterCsts.CASH_COUNTER_TYPE_S);

		while (!end) {
			try {
				lastLine++;
				if (!this.lines.isEmpty())
					newLine = this.lines.remove(0);
				else {
					end = true;
					continue;
					// break;
				}
			} catch (Exception ex) {
				logger.error("Error reading log file : at line :"
						+ this.lastLine + 1 + " with reason :"
						+ ex.getMessage());
				return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
			}

			newLine = newLine.toUpperCase();
			MsgResponse msgResponse = getSupModeResponse(newLine);
			msgType = msgResponse.getMsgType();
			Integer trnNbr13 = null;
			Integer trnNbr24 = null;
			switch (msgType) {
			case AnalyzerCamWinCst.K7_VALUES:
				trnNbr13 = Integer.parseInt(msgResponse.getMatcher().group(1));
				trnNbr24 = Integer.parseInt(msgResponse.getMatcher().group(2));
				if (isFirst) {
					cash.setCacCas1Cas(trnNbr13);
					cash.setCacCas2Cas(trnNbr24);
				} else {
					cash.setCacCas3Cas(trnNbr13);
					cash.setCacCas4Cas(trnNbr24);
				}
				break;

			case AnalyzerCamWinCst.K7_REJECTS:
				trnNbr13 = Integer.parseInt(msgResponse.getMatcher().group(1));
				trnNbr24 = Integer.parseInt(msgResponse.getMatcher().group(2));
				if (isFirst) {
					cash.setCacCas1Rej(trnNbr13);
					cash.setCacCas2Rej(trnNbr24);
				} else {
					cash.setCacCas3Rej(trnNbr13);
					cash.setCacCas4Rej(trnNbr24);
				}
				break;

			case AnalyzerCamWinCst.K7_DISPENSED:
				trnNbr13 = Integer.parseInt(msgResponse.getMatcher().group(1));
				trnNbr24 = Integer.parseInt(msgResponse.getMatcher().group(2));
				if (isFirst) {
					cash.setCacCas1Disp(trnNbr13);
					cash.setCacCas2Disp(trnNbr24);
				} else {
					cash.setCacCas3Disp(trnNbr13);
					cash.setCacCas4Disp(trnNbr24);
				}
				break;

			case AnalyzerCamWinCst.K7_REMAINING:
				break;

			case AnalyzerCamWinCst.K7_TOTAL:
				trnNbr13 = Integer.parseInt(msgResponse.getMatcher().group(1));
				trnNbr24 = Integer.parseInt(msgResponse.getMatcher().group(2));
				if (isFirst) {
					cash.setCacCas1Tot(trnNbr13);
					cash.setCacCas2Tot(trnNbr24);
				} else {
					cash.setCacCas3Tot(trnNbr13);
					cash.setCacCas4Tot(trnNbr24);
				}
				break;

			case AnalyzerCamWinCst.TYPE_3_TYPE_4:
				isFirst = false;
				break;

			case AnalyzerCamWinCst.CARDS_CAPTURED:
				trnNbr13 = Integer.parseInt(msgResponse.getMatcher().group(1));
				cash.setCacCarte(trnNbr13);
							
				break;
				
			case AnalyzerCamWinCst.LAST_CLEARED:
				String inDate =msgResponse.getMatcher().group(1)+ " "+msgResponse.getMatcher().group(2);
				Date clearDate = null;
				try {
					clearDate= dateTimesFormat2.parse(inDate);
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (isClearCard)
					cash.setCacLastClearCard(clearDate);
				else
					cash.setCacLastClearCash(clearDate);
				isClearCard=true;
				break;
				
			case AnalyzerCamWinCst.ACTIVITY_COUNT:
				trnNbr13 = Integer.parseInt(msgResponse.getMatcher().group(1));
				cash.setCacActivity(trnNbr13);
				cash.setCacCas1Val(EjrFileProcessor.DEFAULT_CAS1_VAL);
				cash.setCacCas2Val(EjrFileProcessor.DEFAULT_CAS2_VAL);
				cash.setCacCas3Val(EjrFileProcessor.DEFAULT_CAS3_VAL);
				cash.setCacCas4Val(EjrFileProcessor.DEFAULT_CAS4_VAL);
				cash.setCacCas1Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
				cash.setCacCas2Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
				cash.setCacCas3Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
				cash.setCacCas4Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);

				this.getEjrCashCounterService().save(ctx, cash);
				end = true;
				break;
				
//			case AnalyzerCamWinCst.CASH_COUNTS_CLEARED :
//    		case AnalyzerCamWinCst.CASH_ADDED :
			case AnalyzerCamWinCst.GO_OUT_OF_SERVICE_CMD :
            case AnalyzerCamWinCst.GO_IN_SERVICE_CMD :
    		case AnalyzerCamWinCst.SUPERVISOR_MODE_EXIT:    			   			   			
    		case AnalyzerCamWinCst.START_TRX:
			case AnalyzerCamWinCst.TRA_CODE:
			case AnalyzerCamWinCst.CUTOFF:
			case AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY:
				this.lineToProcess=newLine;
				return msgType;

			}
		}
		return PROCESS_OK;
	}

	private int readSupplyCashCounter(ServiceContext ctx, Date evDate, String line,
			boolean cashCleard) {
		int msgType = AnalyzerCamWinCst.TYPE_1_TYPE_2;
		String newLine = "";
		boolean isFirst = true;
		boolean isClearCard = false;
		boolean end = false;
		EjrCashCounter cash = new EjrCashCounter();
		cash.setCacNeId(this.getTopNe());
		cash.setCacBanId(this.getTopNe().getNeBanId());
		cash.setCacDate(evDate);
		lastEventDate = evDate;
		cash.setCacProcStatus(EjrProcStatusCsts.PROC_STATUS_INSTANCE);
		cash.setCacType(EjrCashCounterCsts.CASH_COUNTER_TYPE_S);

		while (!end) {
			try {
				lastLine++;
				if (!this.lines.isEmpty())
					newLine = this.lines.remove(0);
				else {
					end = true;
					continue;
					// break;
				}
			} catch (Exception ex) {
				logger.error("Error reading log file : at line :"
						+ this.lastLine + 1 + " with reason :"
						+ ex.getMessage());
				return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
			}

			newLine = newLine.toUpperCase();
			MsgResponse msgResponse = getSupModeResponse(newLine);
			msgType = msgResponse.getMsgType();
			Integer trnNbr13 = null;
			Integer trnNbr24 = null;
			switch (msgType) {
			case AnalyzerCamWinCst.SUPPLY_K7_VALUES:
				trnNbr13 = Integer.parseInt(msgResponse.getMatcher().group(1));
				trnNbr24 = Integer.parseInt(msgResponse.getMatcher().group(2));
				if (isFirst) {
					cash.setCacCas1Cas(trnNbr13);
					cash.setCacCas2Cas(trnNbr24);
				} else {
					cash.setCacCas3Cas(trnNbr13);
					cash.setCacCas4Cas(trnNbr24);
				}
				break;

			case AnalyzerCamWinCst.SUPPLY_K7_REJECTS:
				trnNbr13 = Integer.parseInt(msgResponse.getMatcher().group(1));
				trnNbr24 = Integer.parseInt(msgResponse.getMatcher().group(2));
				if (isFirst) {
					cash.setCacCas1Rej(trnNbr13);
					cash.setCacCas2Rej(trnNbr24);
				} else {
					cash.setCacCas3Rej(trnNbr13);
					cash.setCacCas4Rej(trnNbr24);
				}
				break;

			case AnalyzerCamWinCst.SUPPLY_K7_DISPENSED:
				trnNbr13 = Integer.parseInt(msgResponse.getMatcher().group(1));
				trnNbr24 = Integer.parseInt(msgResponse.getMatcher().group(2));
				if (isFirst) {
					cash.setCacCas1Disp(trnNbr13);
					cash.setCacCas2Disp(trnNbr24);
				} else {
					cash.setCacCas3Disp(trnNbr13);
					cash.setCacCas4Disp(trnNbr24);
				}
				break;

			case AnalyzerCamWinCst.SUPPLY_K7_REMAINING:
				break;

			case AnalyzerCamWinCst.SUPPLY_K7_TOTAL:
				trnNbr13 = Integer.parseInt(msgResponse.getMatcher().group(1));
				trnNbr24 = Integer.parseInt(msgResponse.getMatcher().group(2));
				if (isFirst) {
					cash.setCacCas1Tot(trnNbr13);
					cash.setCacCas2Tot(trnNbr24);
				} else {
					cash.setCacCas3Tot(trnNbr13);
					cash.setCacCas4Tot(trnNbr24);
				}
				break;

			case AnalyzerCamWinCst.TYPE_3_TYPE_4:
				isFirst = false;
				break;

			case AnalyzerCamWinCst.CARDS_CAPTURED:
				trnNbr13 = Integer.parseInt(msgResponse.getMatcher().group(1));
				cash.setCacCarte(trnNbr13);
							
				break;
				
			case AnalyzerCamWinCst.LAST_CLEARED:
				String inDate =msgResponse.getMatcher().group(1)+ " "+msgResponse.getMatcher().group(2);
				Date clearDate = null;
				try {
					clearDate= dateTimesFormat2.parse(inDate);
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (isClearCard)
					cash.setCacLastClearCard(clearDate);
				else
					cash.setCacLastClearCash(clearDate);
				isClearCard=true;
				break;
				
			case AnalyzerCamWinCst.REJECTS:
			case AnalyzerCamWinCst.RETRACTS:
				cash.setCacCas1Val(EjrFileProcessor.DEFAULT_CAS1_VAL);
				cash.setCacCas2Val(EjrFileProcessor.DEFAULT_CAS2_VAL);
				cash.setCacCas3Val(EjrFileProcessor.DEFAULT_CAS3_VAL);
				cash.setCacCas4Val(EjrFileProcessor.DEFAULT_CAS4_VAL);
				cash.setCacCas1Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
				cash.setCacCas2Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
				cash.setCacCas3Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
				cash.setCacCas4Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);

				this.getEjrCashCounterService().save(ctx, cash);
				end = true;
				break;
				
			case AnalyzerCamWinCst.SUPPLY_SUPPLIES:
				end = true;
				break;
				
			case AnalyzerCamWinCst.GO_OUT_OF_SERVICE_CMD :
            case AnalyzerCamWinCst.GO_IN_SERVICE_CMD :
    		case AnalyzerCamWinCst.SUPERVISOR_MODE_EXIT:    			   			   			
    		case AnalyzerCamWinCst.START_TRX:
			case AnalyzerCamWinCst.TRA_CODE:
			case AnalyzerCamWinCst.CUTOFF:
			case AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY:
			case AnalyzerCamWinCst.CASH_COUNTERS_BEFORE:
            case AnalyzerCamWinCst.CASH_COUNTERS_AFTER:
				this.lineToProcess=newLine;
				return msgType;

			}
		}
		return PROCESS_OK;
	}

	private int readParenCashCounter(ServiceContext ctx, Date evDate, String line,
			boolean cashCleard) {
		logger.error("start readParenCashCounter"+ evDate);
		int msgType = AnalyzerCamWinCst.TYPE_1_TYPE_2;
		String newLine = "";
		boolean isFirst = true;
		boolean isClearCard = false;
		boolean end = false;
		EjrCashCounter cash = new EjrCashCounter();
		cash.setCacNeId(this.getTopNe());
		cash.setCacBanId(this.getTopNe().getNeBanId());
		cash.setCacDate(evDate);
		lastEventDate = evDate;
		cash.setCacProcStatus(EjrProcStatusCsts.PROC_STATUS_INSTANCE);
		cash.setCacType(EjrCashCounterCsts.CASH_COUNTER_TYPE_S);

		int cas =0;
		
		while (!end) {
			try {
				lastLine++;
				if (!this.lines.isEmpty())
					newLine = this.lines.remove(0);
				else {
					end = true;
					continue;
					// break;
				}
			} catch (Exception ex) {
				logger.error("Error reading log file : at line :"
						+ this.lastLine + 1 + " with reason :"
						+ ex.getMessage());
				return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
			}

			newLine = newLine.toUpperCase();
			MsgResponse msgResponse = getSupModeResponse(newLine);
			msgType = msgResponse.getMsgType();
			Integer totCas = null;
			Integer dispCas = null;
			Integer rejCas = null;
			switch (msgType) {
			case AnalyzerCamWinCst.PAREN_CAS_VALUE:

				cas ++;
				totCas = Integer.parseInt(msgResponse.getMatcher().group(1));
				dispCas = Integer.parseInt(msgResponse.getMatcher().group(2));
				rejCas = Integer.parseInt(msgResponse.getMatcher().group(3));

				switch (cas){
				case 1:
					cash.setCacCas1Tot(totCas);
					cash.setCacCas1Disp(dispCas);
					cash.setCacCas1Rej(rejCas);
					cash.setCacCas1Cas(totCas - dispCas -rejCas);
					break;
					
				case 2:
					cash.setCacCas2Tot(totCas);
					cash.setCacCas2Disp(dispCas);
					cash.setCacCas2Rej(rejCas);
					cash.setCacCas2Cas(totCas - dispCas -rejCas);
					break;
					
				case 3:
					cash.setCacCas3Tot(totCas);
					cash.setCacCas3Disp(dispCas);
					cash.setCacCas3Rej(rejCas);
					cash.setCacCas3Cas(totCas - dispCas -rejCas);
					break;
					
				case 4:
					cash.setCacCas4Tot(totCas);
					cash.setCacCas4Disp(dispCas);
					cash.setCacCas4Rej(rejCas);
					cash.setCacCas4Cas(totCas - dispCas -rejCas);
					break;
				}
				
                if (cas == 4){
					cash.setCacCas1Val(EjrFileProcessor.DEFAULT_CAS1_VAL);
					cash.setCacCas2Val(EjrFileProcessor.DEFAULT_CAS2_VAL);
					cash.setCacCas3Val(EjrFileProcessor.DEFAULT_CAS3_VAL);
					cash.setCacCas4Val(EjrFileProcessor.DEFAULT_CAS4_VAL);
					cash.setCacCas1Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
					cash.setCacCas2Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
					cash.setCacCas3Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
					cash.setCacCas4Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);

					this.getEjrCashCounterService().save(ctx, cash);
					end = true;
                }
				break;
				

				
			case AnalyzerCamWinCst.GO_OUT_OF_SERVICE_CMD :
            case AnalyzerCamWinCst.GO_IN_SERVICE_CMD :
    		case AnalyzerCamWinCst.SUPERVISOR_MODE_EXIT:    			   			   			
    		case AnalyzerCamWinCst.START_TRX:
			case AnalyzerCamWinCst.TRA_CODE:
			case AnalyzerCamWinCst.CUTOFF:
			case AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY:
			case AnalyzerCamWinCst.CASH_COUNTERS_BEFORE:
            case AnalyzerCamWinCst.CASH_COUNTERS_AFTER:
            	if ((cash.getCacCas1Tot() !=null) || (cash.getCacCas2Tot() !=null)) {
            		cash.setCacCas1Val(EjrFileProcessor.DEFAULT_CAS1_VAL);
					cash.setCacCas2Val(EjrFileProcessor.DEFAULT_CAS2_VAL);
					cash.setCacCas3Val(EjrFileProcessor.DEFAULT_CAS3_VAL);
					cash.setCacCas4Val(EjrFileProcessor.DEFAULT_CAS4_VAL);
					cash.setCacCas1Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
					cash.setCacCas2Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
					cash.setCacCas3Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
					cash.setCacCas4Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);

					this.getEjrCashCounterService().save(ctx, cash);
					end = true;
            	}
				this.lineToProcess=newLine;
				return msgType;

			}
		}
		return PROCESS_OK;
	}

	private int processSupMode(ServiceContext ctx, String line, Date elogDate, Date startDate2, String strFileDate){
		int msgType =AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY;
		String newLine="";
		boolean isContinue=false;
		int ret=0;
       
        while (msgType != AnalyzerCamWinCst.SUPERVISOR_MODE_EXIT) {
        	if (!isContinue){
				try {
					lastLine++;
					if (!this.lines.isEmpty())
						newLine = this.lines.remove(0);
					else {
						newLine = "SUPERVISOR MODE EXIT";
						// break;
					}
				} catch (Exception ex) {
					logger.error("Error reading log file :"
							+ EjCamAnalyzerSigma.fileDateFormat.format(elogDate)
							+ " at line :" + this.lastLine + 1
							+ " with reason :" + ex.getMessage());
					return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
				}
        	}
        	isContinue=false;

        	
        	newLine = newLine.toUpperCase();
        	MsgResponse msgResponse = getSupModeResponse(newLine);
            msgType = msgResponse.getMsgType();

            switch (msgType){
    			
            case AnalyzerCamWinCst.SUPPLY_COUNTERS:
            	ret = readSupplyCashCounter(ctx, startDate,newLine,false);
            	if (ret > 0){
            		switch (ret){
            		case AnalyzerCamWinCst.GO_OUT_OF_SERVICE_CMD :
                    case AnalyzerCamWinCst.GO_IN_SERVICE_CMD :
            		case AnalyzerCamWinCst.SUPERVISOR_MODE_EXIT:
            		case AnalyzerCamWinCst.CASH_COUNTERS_BEFORE:
                    case AnalyzerCamWinCst.CASH_COUNTERS_AFTER:
            			isContinue=true;
            			msgType=ret;
            			newLine=this.lineToProcess;
            			break;
            			
            		case AnalyzerCamWinCst.START_TRX:
        			case AnalyzerCamWinCst.TRA_CODE:
        			case AnalyzerCamWinCst.CUTOFF:
        			case AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY:
        				return ret;
            		}
            	}
            	break;
            	
            case AnalyzerCamWinCst.CASH_COUNTERS_PAREN:
            	try {
    				startDate = dateTimesFormat.parse(strFileDate+ " " +msgResponse.getMatcher()
    						.group(1));
    			} catch (ParseException e1) {
    				// TODO Auto-generated catch block
    				e1.printStackTrace();
    			}
            	ret = readParenCashCounter(ctx, startDate,newLine,false);
            	if (ret > 0){
            		switch (ret){
            		case AnalyzerCamWinCst.GO_OUT_OF_SERVICE_CMD :
                    case AnalyzerCamWinCst.GO_IN_SERVICE_CMD :
            		case AnalyzerCamWinCst.SUPERVISOR_MODE_EXIT:
            		case AnalyzerCamWinCst.CASH_COUNTERS_BEFORE:
                    case AnalyzerCamWinCst.CASH_COUNTERS_AFTER:
            			isContinue=true;
            			msgType=ret;
            			newLine=this.lineToProcess;
            			break;
            			
            		case AnalyzerCamWinCst.START_TRX:
        			case AnalyzerCamWinCst.TRA_CODE:
        			case AnalyzerCamWinCst.CUTOFF:
        			case AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY:
        				return ret;
            		}
            	}
            	break;
            	
            case AnalyzerCamWinCst.TYPE_1_TYPE_2:
            	ret = readCashCounter(ctx, startDate,newLine,false);
            	if (ret > 0){
            		switch (ret){
            		case AnalyzerCamWinCst.GO_OUT_OF_SERVICE_CMD :
                    case AnalyzerCamWinCst.GO_IN_SERVICE_CMD :
            		case AnalyzerCamWinCst.SUPERVISOR_MODE_EXIT:
            		case AnalyzerCamWinCst.CASH_COUNTERS_BEFORE:
                    case AnalyzerCamWinCst.CASH_COUNTERS_AFTER:
            			isContinue=true;
            			msgType=ret;
            			newLine=this.lineToProcess;
            			break;
            			
            		case AnalyzerCamWinCst.START_TRX:
        			case AnalyzerCamWinCst.TRA_CODE:
        			case AnalyzerCamWinCst.CUTOFF:
        			case AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY:
        				return ret;
            		}
            	}
            	break;
            	
            case AnalyzerCamWinCst.CASH_CLEAR :
            	EjrCashCounterCleared clr = new EjrCashCounterCleared();
            	clr.setCccNeId(this.getTopNe());
            	clr.setCccBanId(this.getTopNe().getNeBanId());
            	clr.setCccProcStatus(EjrProcStatusCsts.PROC_STATUS_INSTANCE);
            	clr.setCccDate(startDate2);
            	ejrCashCounterClearedService.save(ctx, clr);
            	break;

            case AnalyzerCamWinCst.CASH_COUNTERS_BEFORE:
            case AnalyzerCamWinCst.CASH_COUNTERS_AFTER:
            	try {
    				startDate = dateTimesFormat.parse(strFileDate+ " " +msgResponse.getMatcher()
    						.group(1));
    			} catch (ParseException e1) {
    				// TODO Auto-generated catch block
    				e1.printStackTrace();
    			}
            	readCashCounterSop(ctx, startDate, msgType, startDate2);
            	break;
          

            case AnalyzerCamWinCst.GO_OUT_OF_SERVICE_CMD :
            case AnalyzerCamWinCst.GO_IN_SERVICE_CMD :
            case AnalyzerCamWinCst.SUPERVISOR_MODE_EXIT:
            	msgType=AnalyzerCamWinCst.SUPERVISOR_MODE_EXIT;
            	break;
            	
            case AnalyzerCamWinCst.START_TRX:
			case AnalyzerCamWinCst.TRA_CODE:
			case AnalyzerCamWinCst.CUTOFF:
			case AnalyzerCamWinCst.SUPERVISOR_MODE_ENTRY:
			case AnalyzerCamWinCst.TRACK_2_DATA:
			case AnalyzerCamWinCst.PIN_ENTRED:
			case AnalyzerCamWinCst.TRANS_REQ:
				this.lineToProcess=newLine;
				return msgType;
            
            }
        }
		return PROCESS_OK;
	}
	
	private int readCashCounterSop(ServiceContext ctx, Date evDate,
			int msgType, Date insDate) {
		
		int type=0;
		if ((msgType != AnalyzerCamWinCst.CASH_COUNTERS_AFTER) && (msgType != AnalyzerCamWinCst.CASH_COUNTERS_BEFORE))
			return PROCESS_OK;
		
		EjrCashCounterSop sop = new EjrCashCounterSop();
		sop.setCcsBanId(getTopNe().getNeBanId());
		sop.setCcsNeId(getTopNe());
		sop.setCcsCas1Star(EjrCashCounterSopCsts.STAR_NO);
		sop.setCcsCas2Star(EjrCashCounterSopCsts.STAR_NO);
		sop.setCcsInsDate(insDate);
		if (msgType == AnalyzerCamWinCst.CASH_COUNTERS_AFTER)
			sop.setCcsBeforeAfter(EjrCashCounterSopCsts.AFTER_FLAG);
		else
			sop.setCcsBeforeAfter(EjrCashCounterSopCsts.BEFORE_FLAG);
		sop.setCcsProcStatus(EjrProcStatusCsts.PROC_STATUS_INSTANCE);
		sop.setCcsDate(evDate);
		
		boolean end=false;
		String newLine="";
		int nbCas =0;
		while (!end) {
			try {
				lastLine++;
				if (!this.lines.isEmpty())
					newLine = this.lines.remove(0);
				else {
					return PROCESS_OK;
				}
			} catch (Exception ex) {
				logger.error("Error reading log file :"
						+ EjCamAnalyzerSigma.fileDateFormat.format(evDate)
						+ " at line :" + this.lastLine + 1
						+ " with reason :" + ex.getMessage());
				return EjrFileProcessor.PROCESS_NOK_SYSTEM_ERROR;
			}
			
			newLine = newLine.toUpperCase();
        	MsgResponse msgResponse = getSupModeResponse(newLine);
            type = msgResponse.getMsgType();
            Integer value =null;
            
            switch (type){
            case AnalyzerCamWinCst.SOP_CAS_VALUE:
            	value = Integer.parseInt(msgResponse.getMatcher().group(1));
            	if (nbCas == 0){
            		sop.setCcsCas1Value(value);
					if (newLine.contains("*"))
						sop.setCcsCas1Star(EjrCashCounterSopCsts.STAR_YES);
            	}
            	
            	if (nbCas == 1){           	
					sop.setCcsCas2Value(value);
					if (newLine.contains("*"))
						sop.setCcsCas2Star(EjrCashCounterSopCsts.STAR_YES);
            	}
            	
            	if (nbCas == 2){           	
					sop.setCcsCas3Value(value);
					if (newLine.contains("*"))
						sop.setCcsCas3Star(EjrCashCounterSopCsts.STAR_YES);
            	}
            	
            	if (nbCas == 3){           	
					sop.setCcsCas4Value(value);
					if (newLine.contains("*"))
						sop.setCcsCas4Star(EjrCashCounterSopCsts.STAR_YES);
            	}
            	nbCas++;
            	break;
            	
            case AnalyzerCamWinCst.RETRACTS:
            	value = Integer.parseInt(msgResponse.getMatcher().group(1));
            	sop.setCcsRetracts(value);
            	break;
            	
            case AnalyzerCamWinCst.REJECTS:
            	value = Integer.parseInt(msgResponse.getMatcher().group(1));
            	sop.setCcsRejects(value);
            	if (msgType == AnalyzerCamWinCst.CASH_COUNTERS_BEFORE) {

					EjrCashCounter cash = this.getEjrCashCounterService().findEjrCashCounter4Sop(ctx, getTopNe(), sop);
					if (cash != null) {
						if (value == (cash.getCacCas1Rej()
								+ cash.getCacCas2Rej() + cash.getCacCas3Rej() + cash
									.getCacCas3Rej()))
							sop.setCcsCacId(cash);
					} else {
						EjrCashCounterSop lastSop = ejrCashCounterSopService.findLastEjrCashCounterSop4Atm(ctx, getTopNe());
						if (lastSop != null){
							int lastCounts = lastSop.getCcsCas1Value()+ lastSop.getCcsCas2Value()+lastSop.getCcsRejects();
                			int sopCounts = sop.getCcsCas1Value()+ sop.getCcsCas2Value()+sop.getCcsRejects();
                			
                			if (lastCounts == sopCounts)
                				sop.setCcsCacId(lastSop.getCcsCacId());
						}
					}

            		EjrCashCounterSop afterSop = ejrCashCounterSopService.findEjrCashCounterSop4BeforeAfter4InsDate(ctx, getTopNe(), EjrCashCounterSopCsts.AFTER_FLAG, insDate);
            		if (afterSop != null) { // In case After is before Before
            			if ((afterSop.getCcsCas1Star().compareTo(EjrCashCounterSopCsts.STAR_NO)==0) &&
                        	(afterSop.getCcsCas2Star().compareTo(EjrCashCounterSopCsts.STAR_NO)==0)) {
							EjrAlimentation ali = new EjrAlimentation();
							ali.setAliNeId(this.getTopNe());
							ali.setAliBanId(this.getTopNe().getNeBanId());
							ali.setAliDate(evDate);
							lastEventDate = evDate;
							ali.setAliProcStatus(EjrProcStatusCsts.PROC_STATUS_INSTANCE);
							BigDecimal alim = new BigDecimal("0");
							if ((sop.getCcsCacId() != null)
									&& (afterSop.getCcsCacId() != null)) {
								Integer cas1 = afterSop.getCcsCacId().getCacCas1Cas()+ afterSop.getCcsCacId().getCacCas1Rej();
								cas1 = cas1	- (sop.getCcsCacId().getCacCas1Cas() + sop.getCcsCacId().getCacCas1Rej());
								ali.setAliCas1Nb(cas1);
								BigDecimal cas = new BigDecimal(DEFAULT_CAS1_VAL * cas1);
								alim = alim.add(cas);
								
								Integer cas2 = afterSop.getCcsCacId().getCacCas2Cas()+ afterSop.getCcsCacId().getCacCas2Rej();
								cas2 = cas2	- (sop.getCcsCacId().getCacCas2Cas() + sop.getCcsCacId().getCacCas2Rej());
								ali.setAliCas2Nb(cas2);
								cas = new BigDecimal(DEFAULT_CAS2_VAL * cas2);
								alim = alim.add(cas);
            				}
							
							if (alim.signum()!=0) {
								ali.setAliAmount(alim);
								ejrAlimentationService.save(ctx, ali);
							}
            			}
            		}
            	}else {
            		if ((sop.getCcsCas1Star().compareTo(EjrCashCounterSopCsts.STAR_NO)==0) &&
                		(sop.getCcsCas2Star().compareTo(EjrCashCounterSopCsts.STAR_NO)==0)) {
            			EjrCashCounter cash = this.getEjrCashCounterService().findEjrCashCounter4Sop(ctx, getTopNe(), sop);
                		if (cash != null){
                			if (value == (cash.getCacCas1Rej()+cash.getCacCas2Rej()+cash.getCacCas3Rej()+cash.getCacCas3Rej()))
                				sop.setCcsCacId(cash);
                		} 
                		
                		
                		EjrCashCounterSop befSop = ejrCashCounterSopService.findEjrCashCounterSop4BeforeAfter4InsDate(ctx, getTopNe(), EjrCashCounterSopCsts.BEFORE_FLAG, insDate);
                		if (befSop != null) { // Normal Case
                			int befCounts = befSop.getCcsCas1Value()+ befSop.getCcsCas2Value()+befSop.getCcsRejects();
                			int afterCounts = sop.getCcsCas1Value()+ sop.getCcsCas2Value()+sop.getCcsRejects();
                			if (befCounts != afterCounts) {
                				if (cash == null) {                        			
                        				int addVal = sop.getCcsRejects()/2;
                        				EjrCashCounter cash1 = new EjrCashCounter();
                        				cash1.setCacNeId(this.getTopNe());
                        				cash1.setCacBanId(this.getTopNe().getNeBanId());
                        				cash1.setCacDate(evDate);

                        				cash1.setCacProcStatus(EjrProcStatusCsts.PROC_STATUS_INSTANCE);
                        				cash1.setCacType(EjrCashCounterCsts.CASH_COUNTER_TYPE_C);
                        				
                        				cash1.setCacCas1Cas(sop.getCcsCas1Value());
                        				cash1.setCacCas1Rej(addVal);
                        				cash1.setCacCas1Tot(sop.getCcsCas1Value()+addVal);
                        				cash1.setCacCas1Disp(0);
                        				
                        				cash1.setCacCas2Cas(sop.getCcsCas2Value());
                        				cash1.setCacCas2Rej(addVal);
                        				cash1.setCacCas2Tot(sop.getCcsCas2Value()+addVal);
                        				cash1.setCacCas2Disp(0);
                        				
                        				cash1.setCacCas1Val(EjrFileProcessor.DEFAULT_CAS1_VAL);
                        				cash1.setCacCas2Val(EjrFileProcessor.DEFAULT_CAS2_VAL);
                        				cash1.setCacCas3Val(EjrFileProcessor.DEFAULT_CAS3_VAL);
                        				cash1.setCacCas4Val(EjrFileProcessor.DEFAULT_CAS4_VAL);
                        				cash1.setCacCas1Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
                        				cash1.setCacCas2Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
                        				cash1.setCacCas3Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);
                        				cash1.setCacCas4Etat(EjrCashCounterCsts.CASH_COUNTER_ETAT_O);

                        				cash1= this.getEjrCashCounterService().save(ctx, cash1);
                        				sop.setCcsCacId(cash1);
                        			
                				}
                				
								EjrAlimentation ali = new EjrAlimentation();
								ali.setAliNeId(this.getTopNe());
								ali.setAliBanId(this.getTopNe().getNeBanId());
								ali.setAliDate(evDate);
								lastEventDate = evDate;
								ali.setAliProcStatus(EjrProcStatusCsts.PROC_STATUS_INSTANCE);
								BigDecimal alim = new BigDecimal("0");
								if ((sop.getCcsCacId() != null)
										&& (befSop.getCcsCacId() != null)) {
									Integer cas1 = sop.getCcsCacId().getCacCas1Cas()+ sop.getCcsCacId().getCacCas1Rej();
									cas1 = cas1	- (befSop.getCcsCacId().getCacCas1Cas() + befSop.getCcsCacId().getCacCas1Rej());
									ali.setAliCas1Nb(cas1);
									BigDecimal cas = new BigDecimal(DEFAULT_CAS1_VAL * cas1);
									alim = alim.add(cas);
									
									Integer cas2 = sop.getCcsCacId().getCacCas2Cas()+ sop.getCcsCacId().getCacCas2Rej();
									cas2 = cas2	- (befSop.getCcsCacId().getCacCas2Cas() + befSop.getCcsCacId().getCacCas2Rej());
									ali.setAliCas2Nb(cas2);
									cas = new BigDecimal(DEFAULT_CAS2_VAL * cas2);
									alim = alim.add(cas);
                				} else {
                					if (befCounts == 0){
                						Integer cas1 = sop.getCcsCacId().getCacCas1Cas()+ sop.getCcsCacId().getCacCas1Rej();
    									cas1 = cas1	- 0;
    									ali.setAliCas1Nb(cas1);
    									BigDecimal cas = new BigDecimal(DEFAULT_CAS1_VAL * cas1);
    									alim = alim.add(cas);
    									
    									Integer cas2 = sop.getCcsCacId().getCacCas2Cas()+ sop.getCcsCacId().getCacCas2Rej();
    									cas2 = cas2	- 0;
    									ali.setAliCas2Nb(cas2);
    									cas = new BigDecimal(DEFAULT_CAS2_VAL * cas2);
    									alim = alim.add(cas);
                					} else {
                						if (befSop.getCcsCacId() == null){
                							Integer rej=befSop.getCcsRejects()/2; // To be reviewed
                							Integer cas1 = sop.getCcsCacId().getCacCas1Cas()+ sop.getCcsCacId().getCacCas1Rej();
        									cas1 = cas1	- (befSop.getCcsCas1Value() + rej);
        									ali.setAliCas1Nb(cas1);
        									BigDecimal cas = new BigDecimal(DEFAULT_CAS1_VAL * cas1);
        									alim = alim.add(cas);
        									
        									Integer cas2 = sop.getCcsCacId().getCacCas2Cas()+ sop.getCcsCacId().getCacCas2Rej();
        									cas2 = cas2	- (befSop.getCcsCas2Value() + rej);
        									ali.setAliCas2Nb(cas2);
        									cas = new BigDecimal(DEFAULT_CAS2_VAL * cas2);
        									alim = alim.add(cas);
                						}
                					}
                				}
								
								if (alim.signum()!=0) {
									ali.setAliAmount(alim);
									ejrAlimentationService.save(ctx, ali);
								}
                			} else { //befCounts == afterCounts
                				if (cash == null)
                					sop.setCcsCacId(befSop.getCcsCacId());               				
                			}
                		}
                	} else {
                		int afterCounts = sop.getCcsCas1Value()+ sop.getCcsCas2Value()+sop.getCcsRejects();
                		EjrCashCounterSop befSop = ejrCashCounterSopService.findEjrCashCounterSop4BeforeAfter4InsDate(ctx, getTopNe(), EjrCashCounterSopCsts.BEFORE_FLAG, insDate);
                		int befCounts =0;
                		if (befSop!=null)
                			befCounts = befSop.getCcsCas1Value()+ befSop.getCcsCas2Value()+befSop.getCcsRejects();
                		
                		if (afterCounts == 0){               			
                    		if (befSop != null) {
                    			EjrAlimentation ali = new EjrAlimentation();
								ali.setAliNeId(this.getTopNe());
								ali.setAliBanId(this.getTopNe().getNeBanId());
								ali.setAliDate(evDate);
								lastEventDate = evDate;
								ali.setAliProcStatus(EjrProcStatusCsts.PROC_STATUS_INSTANCE);
								BigDecimal alim = new BigDecimal("0");
								
                    			if (befSop.getCcsCacId()!=null){
                    				Integer cas1 = 0;
									cas1 = cas1	- (befSop.getCcsCacId().getCacCas1Cas() + befSop.getCcsCacId().getCacCas1Rej());
									ali.setAliCas1Nb(cas1);
									BigDecimal cas = new BigDecimal(DEFAULT_CAS1_VAL * cas1);
									alim = alim.add(cas);
									
									Integer cas2 = 0;
									cas2 = cas2	- (befSop.getCcsCacId().getCacCas2Cas() + befSop.getCcsCacId().getCacCas2Rej());
									ali.setAliCas2Nb(cas2);
									cas = new BigDecimal(DEFAULT_CAS2_VAL * cas2);
									alim = alim.add(cas);
                    			} else {
                    				Integer rej=befSop.getCcsRejects()/2; // To be reviewed
                    				Integer cas1 = 0;
									cas1 = cas1	- (befSop.getCcsCas1Value() + rej);
									ali.setAliCas1Nb(cas1);
									BigDecimal cas = new BigDecimal(DEFAULT_CAS1_VAL * cas1);
									alim = alim.add(cas);
									
									Integer cas2 = 0;
									cas2 = cas2	- (befSop.getCcsCas2Value() + rej);
									ali.setAliCas2Nb(cas2);
									cas = new BigDecimal(DEFAULT_CAS2_VAL * cas2);
									alim = alim.add(cas);
                    			}
                    			
                    			if (alim.signum()!=0) {
									ali.setAliAmount(alim);
									ejrAlimentationService.save(ctx, ali);
								}
                    		} 
                		} else {
                			if ((befCounts == afterCounts))
                				sop.setCcsCacId(befSop.getCcsCacId());
                		}
                	}
            	}
            	ejrCashCounterSopService.save(ctx, sop);
            	end=true;
            	break;
            
            }
		}
		
		return PROCESS_OK;
	}

	/*------------------------------------------------------------------------------*/
	/*------------------------------------------------------------------------------*/
	/*------------------------------------------------------------------------------*/
	@Override
	public Date getDateFromFName(String fName) {
		Date fileDate = null;
		if ((fName == null) | (fName.length() < 1)) {
			logger.error(" getDateFromFName --> Given file name is null :"
					+ fName);
			return fileDate;
		}

		// 20150120.jrn
		if (!fName.contains(".")) {
			logger.error(" getDateFromFName --> File name does not match the pattern EJyyMMdd.???; file name = "
					+ fName);
			return fileDate;
		}

		String sdate = fName.split("\\.")[0];
		sdate=sdate.replace("EJ", "");
		SimpleDateFormat sdf = new SimpleDateFormat("yyMMdd");
		try {
			fileDate = sdf.parse(sdate);
		} catch (ParseException ex) {
			logger.error(" getDateFromFName --> Parse exception :", ex);
			return fileDate;
		}

		return fileDate;
	}

	@Override
	public Map<Date, File> sortFiles(File[] files) {
		Map<Date, File> map = new HashMap<Date, File>();
		for (File myFile : files) {
			Date fdate = this.getDateFromFName(myFile.getName());
			if (fdate == null) {
				logger.error("Invalid date for File : " + myFile.getName());
			} else {
				map.put(fdate, myFile);
			}
		}
		if (map != null) {
			Map<Date, File> treeMap = new TreeMap<Date, File>(map);
			return treeMap;
		} else
			return null;
	}

	@Override
	public FileFilter createFileFilter(final String year) {
		FileFilter fileFilter = new FileFilter() {
			@Override
			public boolean accept(File pathname) {
				return ((pathname.isFile())
						&& (pathname.getName().startsWith("EJ"))
						&& (pathname.getName().endsWith(".000"))
						&& (pathname.getName().length() == 12) && (pathname
						.getName().compareTo(year) >= 0)
				/*
				 * && (pathname.getName().contains(year))*
				 */
				);
			}
		};

		return fileFilter;
	}
	
	@Override
	public String formatLastDate(Date lastDate)	{
		if (lastDate == null)
			return "EJ110101.000";
		SimpleDateFormat sdf = new SimpleDateFormat("yyMMdd");
		try {
			String str = sdf.format(lastDate);
			return "EJ"+str+".000";
		} catch (Exception e){
			return "EJ110101.000";
		}
	}
}
